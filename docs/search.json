[
  {
    "objectID": "posts/Problem Set 1/index.html",
    "href": "posts/Problem Set 1/index.html",
    "title": "Problem Set 1 | ",
    "section": "",
    "text": "The purpose of this document is to simulataneously analyze data on US crime rates and become more familiar with the syntax and abilities of R-markdown to combine code and analysis in a progressional document. Blockquotes look better in HTML typically, but you can see their general effect in any document. The text is highlighted differently in RStudio so you know its part of the block quote. Also, the margins of the text in the final document are narrower to separate the block quote from normal text."
  },
  {
    "objectID": "posts/Problem Set 1/index.html#summary-of-features",
    "href": "posts/Problem Set 1/index.html#summary-of-features",
    "title": "Problem Set 1 | ",
    "section": "Summary of Features",
    "text": "Summary of Features\n\n\n\n\n\n\nMurder\nAssault\nUrbanPop\nRape\n\n\n\n\n\nMin. : 0.800\nMin. : 45.0\nMin. :32.00\nMin. : 7.30\n\n\n\n1st Qu.: 4.075\n1st Qu.:109.0\n1st Qu.:54.50\n1st Qu.:15.07\n\n\n\nMedian : 7.250\nMedian :159.0\nMedian :66.00\nMedian :20.10\n\n\n\nMean : 7.788\nMean :170.8\nMean :65.54\nMean :21.23\n\n\n\n3rd Qu.:11.250\n3rd Qu.:249.0\n3rd Qu.:77.75\n3rd Qu.:26.18\n\n\n\nMax. :17.400\nMax. :337.0\nMax. :91.00\nMax. :46.00\n\n\n\n\n\n\nAcross all 50 states the mean of the Murder variable is 7.79 arrests for murder per 100,000 people. While the mean of Assault is 170.8 arrests per 100,000 people. The mean of Rape is 21.23 arrests per 100,000 people. While the mean of UrbanPop is 65.54 per 100,000 people.\n\n# Make sure that this code block shows up in the final document\n# and that the resulting plot does also.\nlibrary(ggplot2)\nlibrary(tidyr)\nscaled_data = as.data.frame(sapply(USArrests, scale))\nggplot(gather(scaled_data, cols, value), aes(x = value)) + \n       geom_histogram(aes(y=..density..), bins = 10) + \n       geom_density(alpha=.2, fill=\"#FF6666\") +\n       facet_grid(.~cols) +\n       ggtitle(\"Feature Histograms for the Scaled US Arrests Data\")\n\n\n\n\n\nMurder is right-skewed. Assault is right-skewed. UrbanPop is approximately symmetric. Rape is right-skewed."
  },
  {
    "objectID": "posts/Problem Set 1/index.html#relationships-between-features",
    "href": "posts/Problem Set 1/index.html#relationships-between-features",
    "title": "Problem Set 1 | ",
    "section": "Relationships Between Features",
    "text": "Relationships Between Features\n\n\n\n\n\nFacet Grid of Scatter Plots\n\n\n\n\n\nThere appears to be a positively correlated relationship between Murder and Assault. The appears to also be a positively correlated relationship between UrbanPop and the other three arrest variables Murder, Assault, and Rape.\n\n\n\n\n\nVariable\nMean\n\n\n\n\nMurder\n7.788\n\n\nAssault\n170.76\n\n\nUrbanPop\n65.54\n\n\nRape\n21.232"
  },
  {
    "objectID": "posts/Problem Set 1/index.html#what-are-the-7-basic-steps-of-machine-learning",
    "href": "posts/Problem Set 1/index.html#what-are-the-7-basic-steps-of-machine-learning",
    "title": "Problem Set 1 | ",
    "section": "What are the 7 basic steps of machine learning?",
    "text": "What are the 7 basic steps of machine learning?\n\nData Collection\nData Reprocessing\nSplitting the Data\nModel Selection\nModel Training\nModel Evaluation\nModel Deployment"
  },
  {
    "objectID": "posts/Problem Set 1/index.html#in-your-own-words-please-explain-the-bias-variance-tradeoff-in-supervised-machine-learning-and-make-sure-to-include-proper-terminology.",
    "href": "posts/Problem Set 1/index.html#in-your-own-words-please-explain-the-bias-variance-tradeoff-in-supervised-machine-learning-and-make-sure-to-include-proper-terminology.",
    "title": "Problem Set 1 | ",
    "section": "In your own words, please explain the bias-variance tradeoff in supervised machine learning and make sure to include proper terminology.",
    "text": "In your own words, please explain the bias-variance tradeoff in supervised machine learning and make sure to include proper terminology.\nThe bias-variance trade-off: it refers to the balance that you need to strike between two sources of error when building a model: Bias: Bias is the error introduced by approximating a real-world problem, which may be complex, by a simplified model. High bias can lead to under fitting, where the model is too simple to capture the underlying patterns in the data. It results in poor performance on both the training and validation sets. Variance: Variance is the error introduced by the models sensitivity to small fluctuations or noise in the training data. High variance can lead to over fitting, where the model becomes too complex and fits the training data too closely. It performs well on the training data but poorly on the validation or test data. The goal in machine learning is to find a model that achieves a balance between bias and variance. This is because reducing bias often increases variance, and vice versa. The challenge is to select the right complexity of the model and fine-tune its parameters to minimize both bias and variance, resulting in a model that generalizes well to unseen data."
  },
  {
    "objectID": "posts/Problem Set 1/index.html#explain-in-your-own-words-why-cross-validation-is-important-and-useful.",
    "href": "posts/Problem Set 1/index.html#explain-in-your-own-words-why-cross-validation-is-important-and-useful.",
    "title": "Problem Set 1 | ",
    "section": "Explain, in your own words, why cross-validation is important and useful.",
    "text": "Explain, in your own words, why cross-validation is important and useful.\nCross-validation is essential machine because: Cross-validation provides a more robust estimate of a models performance compared to a single train-test split. It helps in assessing how well a model generalizes to different subsets of the data. Maximizing Data Utilization: By rotating through different subsets of the data as training and validation sets, cross-validation ensures that all available data is used for both training and evaluation, which is particularly important when the dataset is limited."
  },
  {
    "objectID": "posts/Demo Post 1/index.html",
    "href": "posts/Demo Post 1/index.html",
    "title": "Demo Post 1",
    "section": "",
    "text": "This is a demo post in which we begin the blog. The idea here is that you create one post with this quarto document. The quarto document for a post will be named “index.qmd” insides of folder with the name of the post. For example, if I wanted my post to be titled “Demo Post 1” then I would do the following.\nAfter doing that, you can then edit the index.qmd document for that new post to your heart’s content. Lets do a little of that now so you can see how this might work."
  },
  {
    "objectID": "posts/Demo Post 1/index.html#including-resources",
    "href": "posts/Demo Post 1/index.html#including-resources",
    "title": "Demo Post 1",
    "section": "Including Resources",
    "text": "Including Resources\nSuppose you wanted to discuss something, like the CRISP-DM process for analytics projects. You might wish to refer to an image of the process and you could include the image in the “Demo Post 1” folder and reference it here in the document.\n\n\n\n\n\nYou can easily insert the image through the visual editor in Posit / RStudio."
  },
  {
    "objectID": "posts/Demo Post 1/index.html#data-and-output",
    "href": "posts/Demo Post 1/index.html#data-and-output",
    "title": "Demo Post 1",
    "section": "Data and Output",
    "text": "Data and Output\nLets look at some data.\n\nlibrary(tidyverse)\nlibrary(ggthemes)\ndata(\"USArrests\")\n\nUSArrests %&gt;%\n  ggplot(aes(x = Assault, y = Murder)) +\n  geom_point(pch = 21, color = \"coral3\", bg = \"coral\", size=3) +\n  labs(title = \"Arrests for Murder vs. Assault in US States\",\n       x = \"Arrests for assault per 100,000\",\n       y = \"Arrests for murder per 100,000\") +\n  theme_clean()\n\n\n\n\nThis would show us a relationship that we could then spend some paragraphs analyzing and interpreting."
  },
  {
    "objectID": "posts/Demo Post 2/index.html",
    "href": "posts/Demo Post 2/index.html",
    "title": "Demo Post 2",
    "section": "",
    "text": "We are looking at arrests data by state. The data set has 50 rows (one for each state) and four variables.\n\nglimpse(USArrests)\n\nRows: 50\nColumns: 4\n$ Murder   &lt;dbl&gt; 13.2, 10.0, 8.1, 8.8, 9.0, 7.9, 3.3, 5.9, 15.4, 17.4, 5.3, 2.…\n$ Assault  &lt;int&gt; 236, 263, 294, 190, 276, 204, 110, 238, 335, 211, 46, 120, 24…\n$ UrbanPop &lt;int&gt; 58, 48, 80, 50, 91, 78, 77, 72, 80, 60, 83, 54, 83, 65, 57, 6…\n$ Rape     &lt;dbl&gt; 21.2, 44.5, 31.0, 19.5, 40.6, 38.7, 11.1, 15.8, 31.9, 25.8, 2…\n\n\nEach of the variables are a numeric-continuous data type. We have arrests per 100,000 people for three violent crimes: assault, murder, and rape. We also have a column indicating the degree of urban population in that state. Before preceding with prediction, we note that tree-based techniques can be more unstable if the variables are too correlated with one another. We can also see if there are any extreme skews in the data.\n\nlibrary(GGally)\nggpairs(USArrests)\n\n\n\n\nWe do see some positive relationships and stronger correlations, but mayne not quite enough to get us in trouble.\nNow lets try and predict Murder using the other features.\n\ndt = rpart(Murder ~.,\n           data=USArrests)\nrpart.plot(dt)\n\n\n\n\nWe can calculate a kind of R-squared measure of accuracy by squaring the correlation between the actual Murder values with our predicted ones.\n\nUSArrests %&gt;%\n  mutate(predicted_murder = predict(dt, USArrests)) %&gt;%\n  select(Murder, predicted_murder) %&gt;%\n  cor() -&gt; corrmat\n\nrsq = corrmat[[\"Murder\", \"predicted_murder\"]]^2\nprint(paste(\"The r-square for our model is\", round(rsq,2), sep=\": \"))\n\n[1] \"The r-square for our model is: 0.78\""
  },
  {
    "objectID": "posts/Demo Post 2/index.html#understanding-the-data",
    "href": "posts/Demo Post 2/index.html#understanding-the-data",
    "title": "Demo Post 2",
    "section": "",
    "text": "We are looking at arrests data by state. The data set has 50 rows (one for each state) and four variables.\n\nglimpse(USArrests)\n\nRows: 50\nColumns: 4\n$ Murder   &lt;dbl&gt; 13.2, 10.0, 8.1, 8.8, 9.0, 7.9, 3.3, 5.9, 15.4, 17.4, 5.3, 2.…\n$ Assault  &lt;int&gt; 236, 263, 294, 190, 276, 204, 110, 238, 335, 211, 46, 120, 24…\n$ UrbanPop &lt;int&gt; 58, 48, 80, 50, 91, 78, 77, 72, 80, 60, 83, 54, 83, 65, 57, 6…\n$ Rape     &lt;dbl&gt; 21.2, 44.5, 31.0, 19.5, 40.6, 38.7, 11.1, 15.8, 31.9, 25.8, 2…\n\n\nEach of the variables are a numeric-continuous data type. We have arrests per 100,000 people for three violent crimes: assault, murder, and rape. We also have a column indicating the degree of urban population in that state. Before preceding with prediction, we note that tree-based techniques can be more unstable if the variables are too correlated with one another. We can also see if there are any extreme skews in the data.\n\nlibrary(GGally)\nggpairs(USArrests)\n\n\n\n\nWe do see some positive relationships and stronger correlations, but mayne not quite enough to get us in trouble.\nNow lets try and predict Murder using the other features.\n\ndt = rpart(Murder ~.,\n           data=USArrests)\nrpart.plot(dt)\n\n\n\n\nWe can calculate a kind of R-squared measure of accuracy by squaring the correlation between the actual Murder values with our predicted ones.\n\nUSArrests %&gt;%\n  mutate(predicted_murder = predict(dt, USArrests)) %&gt;%\n  select(Murder, predicted_murder) %&gt;%\n  cor() -&gt; corrmat\n\nrsq = corrmat[[\"Murder\", \"predicted_murder\"]]^2\nprint(paste(\"The r-square for our model is\", round(rsq,2), sep=\": \"))\n\n[1] \"The r-square for our model is: 0.78\""
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Problem Set 6\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nProblem Set 8\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nProblem Set 9\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nProblem Set 3\n\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nIsaac Baron\n\n\n\n\n\n\n  \n\n\n\n\nProblem Set 4\n\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nIsaac Baron\n\n\n\n\n\n\n  \n\n\n\n\nProblem Set 2 | \n\n\n\n\n\n\n\n\n\n\n\n\nSep 17, 2023\n\n\nIsaac Baron [ibaron01@hamline.edu - Student ]\n\n\n\n\n\n\n  \n\n\n\n\nProblem Set 1 | \n\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2023\n\n\nIsaac Baron [ibaron01@hamline.edu - Student ]\n\n\n\n\n\n\n  \n\n\n\n\nDemo Post 2\n\n\n\n\n\n\n\ndecision trees\n\n\nmachine learning\n\n\narrests\n\n\n\n\n\n\n\n\n\n\n\nSep 5, 2023\n\n\nJane Doe\n\n\n\n\n\n\n  \n\n\n\n\nDemo Post 1\n\n\n\n\n\n\n\nquarto\n\n\ncrisp-dm\n\n\nscatterplot\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2023\n\n\nJane Doe\n\n\n\n\n\n\n  \n\n\n\n\nApple Phone Reviews\n\n\n\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\nQMBE 3740: Data Mining\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Projects are different than posts. Projects should be more expansive, impressive and generally more professional in nature compared to posts. Posts can be works in progress. Small ideas or things you did that you thought were interesting. Projects should really showcase your professional abilities. You don’t need to have too many, just make them good. And try to always have one “in the works” so that employers and collaborators can see that you’re driven.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Isaac Baron",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe page your viewing is the “index” page, or the landing page of your site. The site is just a quarto document. And you can put anything on it that could be in a quarto document.\nThere are also settings to get a list of site items you may want people to have easy access to. For example, a list of your blog posts, projects, etc.\nThere are different styles of landing pages. In this particular style, the index.qmd page is used as an about page. Instead of immediately showcasing your work, it showcases you! You can introduce yourself and include your contact information right by your image and description.\nYou can then also decide to have some content show up below the about portion as well."
  },
  {
    "objectID": "posts/Problem Set 2/index.html",
    "href": "posts/Problem Set 2/index.html",
    "title": "Problem Set 2 | ",
    "section": "",
    "text": "Before getting started, we’ll need to make sure the necessary packages installed and libraries loaded. Look at the list below and install if necessary before loading them.\n# Clear everything\nrm(list = ls())\n# Load libraries\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(GGally)\nlibrary(dummy)\nlibrary(corrplot)"
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-1",
    "href": "posts/Problem Set 2/index.html#step-1",
    "title": "Problem Set 2 | ",
    "section": "Step 1",
    "text": "Step 1\nIn this step we are seeking some understanding of the data we have obtained. Remember this is different from understanding the data we NEED to obtain to best answer a business question. We need to understand both and the differences between the two. But, because we have this bikes_ps.csv data set, we will take a dive into that. We first just get an idea for the dimensions and contents.\n\n# Read in the data set and use glimpse to get an idea.\nbikes = read_csv(\"bikes_ps.csv\")\nglimpse(bikes)\n\nRows: 731\nColumns: 10\n$ date        &lt;date&gt; 2011-01-01, 2011-01-02, 2011-01-03, 2011-01-04, 2011-01-0…\n$ season      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ holiday     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ weekday     &lt;dbl&gt; 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4…\n$ weather     &lt;dbl&gt; 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2…\n$ temperature &lt;dbl&gt; 46.71653, 48.35024, 34.21239, 34.52000, 36.80056, 34.88784…\n$ realfeel    &lt;dbl&gt; 46.39865, 45.22419, 25.70131, 28.40009, 30.43728, NA, 28.0…\n$ humidity    &lt;dbl&gt; 0.805833, 0.696087, 0.437273, 0.590435, 0.436957, 0.518261…\n$ windspeed   &lt;dbl&gt; 6.679665, 10.347140, 10.337565, 6.673420, 7.780994, 3.7287…\n$ rentals     &lt;dbl&gt; 985, 801, 1349, 1562, 1600, 1606, 1510, 959, 822, 1321, 12…\n\n\nThe outcome of glimpse() tells us immediately that our data set contains\n\n731 observations with 10 columns (or features).\nData types are initially all numeric &lt;dbl&gt; except for a date which is a &lt;date&gt; data type. this is code\n\nNow these are the default choices made by the structure of the data set along with the processing intelligence of the read_csv() import function. But our human understanding of the data and its use in solving a business problem are crucial to understanding what the datatype should be and whether changes will need to be made."
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-2",
    "href": "posts/Problem Set 2/index.html#step-2",
    "title": "Problem Set 2 | ",
    "section": "Step 2",
    "text": "Step 2\nLooking at the data we see that the numeric data types are not truly appropriate for some of the variables. Lets start with some obvious ones like season and holiday. First we need to remember that all variables/features are encoded information. And we need to discern what the original information to be encoded was and how the encoding scheme we see relates to it. For season we can be confident it was meant to indicate the general season in which a rental took place, such as winter, spring, summer, and fall. Instead of using text, these seasons were encoded, or represented by, a number. Now any numbers could be chosen, but typically the numbers might start at the beginning of a year and progress from there, in other words maybe winter = 1, spring = 2, etc. However, we cannot be truly certain without checking. First the best idea is to look at a codebook if one is provided. A codebook is a description of encoding schemes given by the person or persons who actually did the encoding. An alternative method in this case would be to look at the data column along with the season to see whether 1 corresponds to winter months etc. For brevity, we won’t do this for all features, but we’ll take a look at what it means to sleuth out these problems.\n\n# Create a new feature representing the month of year\n# i.e., jan = 1, feb = 2, ..., dec = 12.\n# Then we'll create a table showing season by month\nbikes %&gt;%\n  mutate(month = month(date)) %&gt;%\n  group_by(month) %&gt;%\n  select(season, month) %&gt;%\n  table()\n\n      month\nseason  1  2  3  4  5  6  7  8  9 10 11 12\n     1 62 57 40  0  0  0  0  0  0  0  0 22\n     2  0  0 22 60 62 40  0  0  0  0  0  0\n     3  0  0  0  0  0 20 62 62 44  0  0  0\n     4  0  0  0  0  0  0  0  0 16 62 60 40\n\n\nFrom the above table it becomes clear that the season variable not easily dividable into months. For example season 1 does correspond to wintery months such as December, January, Februrary, and March. But March also has some season 2. Similarly, December has a lot more observations in season 4 (maybe Fall?) than season 1 - Winter. This may suggest that the variable indicates the first official day of winter on December 21 and the first official day of spring on March 21, etc.\nHowever it is encoded, the season feature is not truly numeric. Instead a number on a football jersey, the value is nominal and meant to be an identifier - identifying to which season a day belongs. This is called nominal or categorical data. In R, this is most commonly coded as the factor datatype.\nOther features also use numbers this way and should be represented as factors instead: holiday, weekday, and weather. We can now convert these to factors, and even specify new labels if we’d like.\n\nbikes = bikes %&gt;%\n  mutate_at(vars(season, holiday, weekday, weather), factor) %&gt;%\n  mutate(season = fct_recode(season, \"Winter\"=\"1\", \n                                     \"Spring\"=\"2\",\n                                     \"Summer\"=\"3\",\n                                     \"Fall\"=\"4\"))\n\n\nOther Factor Feature Explanations\n\nholiday: This is a binary indicator. A “1” indicates the data is considered a holiday and a 0 that it isn’t. This is categorical and so it needed to be converted to two groups.\nweekday: Here each number represents a day of the week like Sunday, Monday, etc. This means the numbers don’t act as numbers - but instead indicate the day of the week a rental occurs. So we convert it to the categorical factor data type. We could easily change the labels to reflect the day of the week.\nweather: This appears to take on values 1, 2, and 3. But what does it mean? Without a codebook this one is a problem. We cannot be sure whether this is in fact categorical or numerical, and we wouldn’t know that the categories are. Likely, it refers to weather severity or precipitation. For example, perhaps 1 is clear skies no precipitation, 2 is cloudy/rainy, and 3 is stormy. But we would need to reach out to the data creator to be sure."
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-3",
    "href": "posts/Problem Set 2/index.html#step-3",
    "title": "Problem Set 2 | ",
    "section": "Step 3",
    "text": "Step 3\nNow that we’ve got everything properly recognized as numeric or factor, we can use summary() to look at some basic statistics and also scout out missing values. Do make things easier to read, we’ll divide summaries by numeric and factor data types.\n\nbikes %&gt;%\n  select(-date) %&gt;%\n  keep(is.numeric) %&gt;%\n  summary()\n\n  temperature       realfeel         humidity        windspeed      \n Min.   :22.60   Min.   : 12.59   Min.   :0.0000   Min.   : 0.9322  \n 1st Qu.:46.12   1st Qu.: 43.38   1st Qu.:0.5200   1st Qu.: 5.6182  \n Median :59.76   Median : 61.25   Median :0.6267   Median : 7.5343  \n Mean   :59.51   Mean   : 59.60   Mean   :0.6279   Mean   : 7.9303  \n 3rd Qu.:73.05   3rd Qu.: 75.43   3rd Qu.:0.7302   3rd Qu.: 9.7092  \n Max.   :90.50   Max.   :103.10   Max.   :0.9725   Max.   :21.1266  \n                 NA's   :27                                         \n    rentals    \n Min.   :  22  \n 1st Qu.:3152  \n Median :4548  \n Mean   :4504  \n 3rd Qu.:5956  \n Max.   :8714  \n               \n\n\n\nbikes %&gt;%\n  select(-date) %&gt;%\n  keep(is.factor) %&gt;%\n  summary()\n\n    season    holiday weekday weather\n Winter:181   0:710   0:105   1:463  \n Spring:184   1: 21   1:105   2:247  \n Summer:188           2:104   3: 21  \n Fall  :178           3:104          \n                      4:104          \n                      5:104          \n                      6:105          \n\n\nWe see that we have no missing values for factor variables, and are only missing values for the realfeel variable in the set of numeric variables. We are missing 27 values. We could throw these out, but one problem with that is what if they are not missing by random? In other words, what if there are certain days, say when rentals are really high or low that causes this number not to be recorded? Also, although 27 observations are missing realfeel, they are not missing other values. By discarding them, we also throw out all the other information those observations contain. An alternative is to impute the missing values. This means we fill in numbers in the blank spots. But what numbers? We’re essentially making up data by trying to guess what was supposed to be recorded there. If we’re going to do this, we should first try to do no harm. Essentially, we should hope that the statistical properties of the data are not altered or biased by our choice of value. There are number of ways to do this, but for this assignment you’re asked to do the median value imputation. For illustration purposes I’m going to create a copy to compare (you don’t need to do this).\n\nbikes = bikes %&gt;%\n  mutate(realfeel_orig = realfeel)\n\nNow, lets impute the missing values and compare.\n\nbikes = bikes %&gt;%\n  mutate(realfeel = ifelse(is.na(realfeel),\n                           median(realfeel, na.rm = TRUE),\n                           realfeel))\n\nThe above code uses ifelse logic to replace values. It asks a question (checks a condition) and then does different actions based on the answer.\nIs realfeel missing? (is.na(realfeel)):\n\nYES (TRUE): replace with median(reelfeel, na.rm = TRUE).\nNO (FALSE): replace with realfeel (which leaves it unchanged, since we’re just replacing it with itself).\n\nNow we can compare the resulting distributions.\n\nbikes %&gt;%\n  select(realfeel, realfeel_orig) %&gt;%\n  summary()\n\n    realfeel      realfeel_orig   \n Min.   : 12.59   Min.   : 12.59  \n 1st Qu.: 43.80   1st Qu.: 43.38  \n Median : 61.25   Median : 61.25  \n Mean   : 59.66   Mean   : 59.60  \n 3rd Qu.: 74.98   3rd Qu.: 75.43  \n Max.   :103.10   Max.   :103.10  \n                  NA's   :27      \n\n\nLooking at the above distributions, we see that realfeel doesn’t have any missing values and is the same median and basically the same mean. Extreme points are not changed, although the 1st and 3rd quartiles changed a smidgen.\n\n# Remove the copy of original realfeel\nbikes = bikes %&gt;% select(-realfeel_orig)"
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-4",
    "href": "posts/Problem Set 2/index.html#step-4",
    "title": "Problem Set 2 | ",
    "section": "Step 4",
    "text": "Step 4\nNow we need to gain some understanding of what we’re trying to predict, rentals. This involves understanding what the variable is and its distribution. Rentals appears to encode the total numbers of bike rentals that occurred on a given date. This is count data. We can use both descriptive statistics as well as a histogram to get a picture. Additionally, we can look at a picture of rentals over time to see if there is some trending.\n\nbikes %&gt;% select(rentals) %&gt;% summary()\n\n    rentals    \n Min.   :  22  \n 1st Qu.:3152  \n Median :4548  \n Mean   :4504  \n 3rd Qu.:5956  \n Max.   :8714  \n\n\nThe lowest recorded number is 22 rentals, and the max a whopping 8,714 rentals! Across the data the mean is roughly 4500 rentals and the median is only a little higher suggesting that there shouldn’t be an extreme skew and it’s fairly symmetric.\n\nbikes %&gt;%\n  ggplot(aes(x=rentals)) + \n  geom_histogram(aes(y=after_stat(density)),\n                 fill = \"aquamarine\",\n                 color = \"aquamarine3\",\n                 alpha = 0.7) +\n  geom_density(color = \"black\") +\n  labs(title = \"Distribution of Daily Bike Rentals\",\n       x = \"Rentals (count)\") +\n  theme_clean()\n\n\n\n\nFortunately, we don’t seem to have a huge number of outliers and the distribution is not highly skewed. This means that we might not need to make a log-transformation of this feature to make it more normal. However, one thing to note is that it is a tri-model looking distribution. There are peaks in the data which suggest that there might be three different over-lapping normal distributions. A low, middle, and high one."
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-5",
    "href": "posts/Problem Set 2/index.html#step-5",
    "title": "Problem Set 2 | ",
    "section": "Step 5",
    "text": "Step 5\nMany of the supervised learning algorithms can be helped or hurt by the relationships between features that will be used as predictors. We need to understand the distributions of each variable, looking for skew, outliers, and any other weirdness. This could involve histograms or boxplots of the variables. We can use scatter plots to look at relationships between predictors. For easier comparison we can also use correlation matrices to show statistically linear relationships.\n\nbikes %&gt;%\n  keep(is.numeric) %&gt;%\n  ggpairs()\n\n\n\n\nFirst off we can see that temperature and realfeel have an almost perfectly linear relationship. The correlation is 0.96! This is a suspiciously strong relationship. In fact, this usually means that one variable is a function of the other. Indeed, realfeel is a relationship between temperature and humidity and wind that is mean to incorporate what temperature it feels like to a human. In such a case, we will want to leave out a variable. Either realfeel or the other features that go into it.\nThe distribution plots do not look particularly alarming. And the scatterplots don’t show any other overwhelmingly strong relationships. What we can see, is that there is a positive and nonlinear relationship between temperature and rentals. Warmer temps are associated with more rentals (not surprising). But eventually, warmer temperatures result in weather that is too hot for comfort - leading to decreased rentals.\nWe can also check these correlations with corrplot.\n\nbikes %&gt;%\n  keep(is.numeric) %&gt;%\n  cor() %&gt;%\n  corrplot()\n\n\n\n\nSometimes we need to convert features to achieve different objectives.\n\nWe might transform a feature to make it easier for our learning algorithm to use, or\nwe might transform a feature to put it on the same or similar scale with the the other features.\n\nWe’re going to Z-score normalize the temperature feature. Our reason is mostly arbitrary, but one benefit is that after the transformation the mean will be zero. Positive numbers will represent above average temperatures and negative below average ones.\n\nbikes = bikes %&gt;%\n  mutate(temperature = (temperature - mean(temperature))/sd(temperature))\n\nbikes %&gt;%\n  select(temperature) %&gt;%\n  summary()\n\n  temperature      \n Min.   :-2.38324  \n 1st Qu.:-0.86479  \n Median : 0.01611  \n Mean   : 0.00000  \n 3rd Qu.: 0.87425  \n Max.   : 2.00098  \n\n\nWe can min-max normalize the wind variable. This will take all values of the feature and cram it into the interval \\([0, 1]\\). It essentially puts a feature into a percent range.\n\nbikes = bikes %&gt;%\n  mutate(windspeed = (windspeed - min(windspeed))/(max(windspeed)-min(windspeed)))\n\nA very important step, and a very common one required by many learning algorithms, is converting all categorical variables into dummy variables. This can be done many different ways in R. The dummy package does make it easier, however.\n\n# Convert every factor type feature into \n# a collection dummy variables.\nbikes_dummies = dummy(bikes, int = TRUE)\n\nBefore running the dummy() function we had 10 variables in the dataset. The result of the function is a new dataset with only the dummy variables generated from the factor variables in bikes. At this point we can replace the factor variables with the dummy ones.\n\nbikes_num = bikes %&gt;% keep(is.numeric)\nbikes = bind_cols(bikes_num, bikes_dummies)"
  },
  {
    "objectID": "posts/Problem Set 2/index.html#step-6",
    "href": "posts/Problem Set 2/index.html#step-6",
    "title": "Problem Set 2 | ",
    "section": "Step 6",
    "text": "Step 6\nWe’re going to perform a penalized form of regression known as LASSO to find a decent predictive model. We’ll need to do a few things first. We need to get rid variables we don’t intend to have as predictors. The date and realfeel features will be removed.\n\nbikes = bikes %&gt;%\n  select(-realfeel) %&gt;%\n  mutate(temperature2 = temperature^2)\n\nNormally, for a linear regression, you’d need to remove one dummy variable from a categorical variable. For example, season has 4 values (Winter, Spring, Fall, and Summer). We have dummy variable for each, but we need to omit one in order for it to work. But with LASSO, its okay and actually better to include them all and let the algorithm decide which to eliminate.\n\n# Separate predictors from target feature.\nrentals = bikes$rentals\npredictors = as.matrix(select(bikes, -rentals))\n  \n\n# estimate model\ncv.model = gamlr::cv.gamlr(x=predictors, y=rentals)\n\nLoading required package: gamlr\n\n\nLoading required package: Matrix\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nplot(cv.model)\n\n\n\n\n\nbetamin = coef(cv.model, select = \"min\")\nbetamin\n\n21 x 1 sparse Matrix of class \"dgCMatrix\"\n                     seg91\nintercept      7188.241247\ntemperature     977.913810\nhumidity      -2989.755533\nwindspeed     -1863.339998\nseason_Winter  -727.909032\nseason_Spring   -95.984494\nseason_Summer    12.909978\nseason_Fall     301.456207\nholiday_0       437.471632\nholiday_1         .       \nweekday_0      -260.794743\nweekday_1       -96.389630\nweekday_2        -5.296943\nweekday_3         .       \nweekday_4         .       \nweekday_5         .       \nweekday_6        58.890335\nweather_1       256.135832\nweather_2         .       \nweather_3     -1658.716768\ntemperature2   -529.867870\n\n\n\nbikes = bikes %&gt;%\n  mutate(pred = as.numeric(predict(cv.model, predictors)))\n\n\nbikes %&gt;%\n  ggplot(aes(x=rentals, y=pred)) +\n  geom_point()"
  },
  {
    "objectID": "posts/Problem Set 3/index.html",
    "href": "posts/Problem Set 3/index.html",
    "title": "Problem Set 3",
    "section": "",
    "text": "Assignment\n1. Create a new Rmarkdown document that will show case your data exploration, modeling, and error testing.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rpart)\nlibrary(caret)\n\nLoading required package: lattice\n\nAttaching package: 'caret'\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\nlibrary(rpart.plot)\n\n2. Explore the data and determine the number of variables and the quantity of any missing values. If values are missing, prescribe a plan to deal with the problem.\n\nToycor &lt;- read.csv(\"ToyotaCorolla.csv\")\nstr(Toycor)\n\n'data.frame':   1436 obs. of  39 variables:\n $ Id               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Model            : chr  \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" ...\n $ Price            : int  13500 13750 13950 14950 13750 12950 16900 18600 21500 12950 ...\n $ Age_08_04        : int  23 23 24 26 30 32 27 30 27 23 ...\n $ Mfg_Month        : int  10 10 9 7 3 1 6 3 6 10 ...\n $ Mfg_Year         : int  2002 2002 2002 2002 2002 2002 2002 2002 2002 2002 ...\n $ KM               : int  46986 72937 41711 48000 38500 61000 94612 75889 19700 71138 ...\n $ Fuel_Type        : chr  \"Diesel\" \"Diesel\" \"Diesel\" \"Diesel\" ...\n $ HP               : int  90 90 90 90 90 90 90 90 192 69 ...\n $ Met_Color        : int  1 1 1 0 0 0 1 1 0 0 ...\n $ Color            : chr  \"Blue\" \"Silver\" \"Blue\" \"Black\" ...\n $ Automatic        : int  0 0 0 0 0 0 0 0 0 0 ...\n $ CC               : int  2000 2000 2000 2000 2000 2000 2000 2000 1800 1900 ...\n $ Doors            : int  3 3 3 3 3 3 3 3 3 3 ...\n $ Cylinders        : int  4 4 4 4 4 4 4 4 4 4 ...\n $ Gears            : int  5 5 5 5 5 5 5 5 5 5 ...\n $ Quarterly_Tax    : int  210 210 210 210 210 210 210 210 100 185 ...\n $ Weight           : int  1165 1165 1165 1165 1170 1170 1245 1245 1185 1105 ...\n $ Mfr_Guarantee    : int  0 0 1 1 1 0 0 1 0 0 ...\n $ BOVAG_Guarantee  : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Guarantee_Period : int  3 3 3 3 3 3 3 3 3 3 ...\n $ ABS              : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Airbag_1         : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Airbag_2         : int  1 1 1 1 1 1 1 1 0 1 ...\n $ Airco            : int  0 1 0 0 1 1 1 1 1 1 ...\n $ Automatic_airco  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Boardcomputer    : int  1 1 1 1 1 1 1 1 0 1 ...\n $ CD_Player        : int  0 1 0 0 0 0 0 1 0 0 ...\n $ Central_Lock     : int  1 1 0 0 1 1 1 1 1 0 ...\n $ Powered_Windows  : int  1 0 0 0 1 1 1 1 1 0 ...\n $ Power_Steering   : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Radio            : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Mistlamps        : int  0 0 0 0 1 1 0 0 0 0 ...\n $ Sport_Model      : int  0 0 0 0 0 0 1 0 0 0 ...\n $ Backseat_Divider : int  1 1 1 1 1 1 1 1 0 1 ...\n $ Metallic_Rim     : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Radio_cassette   : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Parking_Assistant: int  0 0 0 0 0 0 0 0 0 0 ...\n $ Tow_Bar          : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\nmissing_values &lt;- colSums(is.na(Toycor))\n\n3. Analyze whether the Price variable is appropriate for a linear regression model and discuss its distribution. Are there any transformations that we might apply to the price variable?\n\nplot(Toycor$Price, Toycor$IndependentVariable, main = \"Scatter Plot of Price vs. IndependentVariable\")\n\n\n\n\n\nToycor$LogPrice &lt;- log(Toycor$Price)\n\n4. Is there a relationship between any of the features in the data and the Price feature? Perform some exploratory analysis to determine some features that are related using a feature plot.\n\nToycor = Toycor %&gt;%\n  select(-Id, -Model, -Mfg_Month, -Cylinders)\n\n\nToycor_fct = Toycor %&gt;%\n  select(-Price, -Age_08_04, -KM, -HP, -CC, -Quarterly_Tax, -Weight) %&gt;%\n  mutate_all(.funs = factor)\n\nToycor_num = Toycor %&gt;%\n  select(Price, Age_08_04, KM, HP, CC, Quarterly_Tax, Weight)\n\nToycor2 = bind_cols(Toycor_num, Toycor_fct)\n\n\nToycor2 %&gt;%\n  keep(is.numeric) %&gt;%\n  ggpairs()\n\n\n\n\n\ncorrelation_mileage &lt;- cor(Toycor$KM, Toycor$Price)\ncorrelation_age &lt;- cor(Toycor$Age_08_04, Toycor$Price)\ncorrelation_Mfg_Year &lt;- cor(Toycor$Mfg_Year, Toycor$Price)\n\n\nlibrary(ggplot2)\n\nggplot(Toycor, aes(x = KM, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. KM\")\n\n\n\nggplot(Toycor, aes(x = Age_08_04, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. Age_08_04\")\n\n\n\nggplot(Toycor, aes(x = Mfg_Year, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. Mfg_Year\")\n\n\n\n\n\nlm1 = lm(Price ~ Age_08_04 + KM,\n         data = Toycor2)\nsummary(lm1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM, data = Toycor2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6789.7  -971.9   -63.7   828.0 12633.5 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  2.048e+04  1.400e+02  146.26   &lt;2e-16 ***\nAge_08_04   -1.541e+02  2.736e+00  -56.33   &lt;2e-16 ***\nKM          -1.646e-02  1.357e-03  -12.13   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1663 on 1433 degrees of freedom\nMultiple R-squared:   0.79, Adjusted R-squared:  0.7897 \nF-statistic:  2695 on 2 and 1433 DF,  p-value: &lt; 2.2e-16\n\n\n\nToycor %&gt;%\n  select(-Fuel_Type, -Color) %&gt;%\n  cor() %&gt;%\n  corrplot::corrplot(., number.cex=.2)\n\n\n\n\n5. Are there any predictor variables in the data that are potentially too strongly related to each other? Make sure to use reference any visualizations, tables, or numbers to show this.\nAge_08_04 and Price are strongly negatively correlated. You can see this relationship in the scatter plot below. The negative slope of the trend line shows the negative correlation. The correlation of -0.877 between Age_08_04 and Price is the only relationship that is potentially too strong.\n\nggplot(Toycor, aes(x = Age_08_04, y = Price)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +  # Add a trendline (linear regression)\n  labs(title = \"Scatter Plot of Price vs. Age_08_04\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n6. Partition your data into a training set with 70% of the observations and a testing set with the remaining 30%.\n\nset.seed(123)  \ntrainIndex &lt;- createDataPartition(Toycor$Price, p = 0.7, list = FALSE)\ntrain_data &lt;- Toycor[trainIndex, ]\ntest_data &lt;- Toycor[-trainIndex, ]\n\n7. Based on your results and relationships in questions (4) and (5), build a regression tree model to predict car prices. With the data Toycor_data Make sure to conduct cross validation to evaluate the model and choose the best cost complexity parameter for this problem (use default values for minsplit, minbucket, maxdepth, etc. But choose grid of cp values to tune over). Use rpart.plot to view your tree and discuss its complexity, usefulness, etc. What role is pre-pruning and post-pruning playing here?\n\ndt1 = train(Price ~ .,\n            data = select(test_data, -Age_08_04),\n            method = \"rpart\",\n            trControl = trainControl(method = \"none\"),\n            metric = \"RMSE\")\ndt1\n\nCART \n\n429 samples\n 34 predictor\n\nNo pre-processing\nResampling: None \n\n\n\n# Define a formula for the model\nformula &lt;- Price ~ .\n\n# Set up a grid of 'cp' values to tune over\ncp_grid &lt;- seq(0, 0.1, by = 0.01)\n\n# Create a train control object for cross-validation (e.g., 10-fold)\nctrl &lt;- trainControl(method = \"cv\", number = 10)\n\n# Train the regression tree model and choose the best 'cp' value\ndt_model &lt;- train(\n  formula,\n  data = train_data,\n  method = \"rpart\",\n  trControl = ctrl,\n  tuneGrid = data.frame(cp = cp_grid),\n  metric = \"RMSE\"\n)\n\n# View the best 'cp' value and summary\ncat(\"Best cp value:\", dt_model$bestTune$cp, \"\\n\")\n\nBest cp value: 0 \n\nprintcp(dt_model$finalModel)\n\n\nRegression tree:\n(function (formula, data, weights, subset, na.action = na.rpart, \n    method, model = FALSE, x = FALSE, y = TRUE, parms, control, \n    cost, ...) \n{\n    Call &lt;- match.call()\n    if (is.data.frame(model)) {\n        m &lt;- model\n        model &lt;- FALSE\n    }\n    else {\n        indx &lt;- match(c(\"formula\", \"data\", \"weights\", \"subset\"), \n            names(Call), nomatch = 0)\n        if (indx[1] == 0) \n            stop(\"a 'formula' argument is required\")\n        temp &lt;- Call[c(1, indx)]\n        temp$na.action &lt;- na.action\n        temp[[1]] &lt;- quote(stats::model.frame)\n        m &lt;- eval.parent(temp)\n    }\n    Terms &lt;- attr(m, \"terms\")\n    if (any(attr(Terms, \"order\") &gt; 1)) \n        stop(\"Trees cannot handle interaction terms\")\n    Y &lt;- model.response(m)\n    wt &lt;- model.weights(m)\n    if (any(wt &lt; 0)) \n        stop(\"negative weights not allowed\")\n    if (!length(wt)) \n        wt &lt;- rep(1, nrow(m))\n    offset &lt;- model.offset(m)\n    X &lt;- rpart.matrix(m)\n    nobs &lt;- nrow(X)\n    nvar &lt;- ncol(X)\n    if (missing(method)) {\n        method &lt;- if (is.factor(Y) || is.character(Y)) \n            \"class\"\n        else if (inherits(Y, \"Surv\")) \n            \"exp\"\n        else if (is.matrix(Y)) \n            \"poisson\"\n        else \"anova\"\n    }\n    if (is.list(method)) {\n        mlist &lt;- method\n        method &lt;- \"user\"\n        init &lt;- if (missing(parms)) \n            mlist$init(Y, offset, wt = wt)\n        else mlist$init(Y, offset, parms, wt)\n        keep &lt;- rpartcallback(mlist, nobs, init)\n        method.int &lt;- 4\n        parms &lt;- init$parms\n    }\n    else {\n        method.int &lt;- pmatch(method, c(\"anova\", \"poisson\", \"class\", \n            \"exp\"))\n        if (is.na(method.int)) \n            stop(\"Invalid method\")\n        method &lt;- c(\"anova\", \"poisson\", \"class\", \"exp\")[method.int]\n        if (method.int == 4) \n            method.int &lt;- 2\n        init &lt;- if (missing(parms)) \n            get(paste(\"rpart\", method, sep = \".\"), envir = environment())(Y, \n                offset, , wt)\n        else get(paste(\"rpart\", method, sep = \".\"), envir = environment())(Y, \n            offset, parms, wt)\n        ns &lt;- asNamespace(\"rpart\")\n        if (!is.null(init$print)) \n            environment(init$print) &lt;- ns\n        if (!is.null(init$summary)) \n            environment(init$summary) &lt;- ns\n        if (!is.null(init$text)) \n            environment(init$text) &lt;- ns\n    }\n    Y &lt;- init$y\n    xlevels &lt;- .getXlevels(Terms, m)\n    cats &lt;- rep(0, ncol(X))\n    if (!is.null(xlevels)) {\n        indx &lt;- match(names(xlevels), colnames(X), nomatch = 0)\n        cats[indx] &lt;- (unlist(lapply(xlevels, length)))[indx &gt; \n            0]\n    }\n    extraArgs &lt;- list(...)\n    if (length(extraArgs)) {\n        controlargs &lt;- names(formals(rpart.control))\n        indx &lt;- match(names(extraArgs), controlargs, nomatch = 0)\n        if (any(indx == 0)) \n            stop(gettextf(\"Argument %s not matched\", names(extraArgs)[indx == \n                0]), domain = NA)\n    }\n    controls &lt;- rpart.control(...)\n    if (!missing(control)) \n        controls[names(control)] &lt;- control\n    xval &lt;- controls$xval\n    if (is.null(xval) || (length(xval) == 1 && xval == 0) || \n        method == \"user\") {\n        xgroups &lt;- 0\n        xval &lt;- 0\n    }\n    else if (length(xval) == 1) {\n        xgroups &lt;- sample(rep(1:xval, length.out = nobs), nobs, \n            replace = FALSE)\n    }\n    else if (length(xval) == nobs) {\n        xgroups &lt;- xval\n        xval &lt;- length(unique(xgroups))\n    }\n    else {\n        if (!is.null(attr(m, \"na.action\"))) {\n            temp &lt;- as.integer(attr(m, \"na.action\"))\n            xval &lt;- xval[-temp]\n            if (length(xval) == nobs) {\n                xgroups &lt;- xval\n                xval &lt;- length(unique(xgroups))\n            }\n            else stop(\"Wrong length for 'xval'\")\n        }\n        else stop(\"Wrong length for 'xval'\")\n    }\n    if (missing(cost)) \n        cost &lt;- rep(1, nvar)\n    else {\n        if (length(cost) != nvar) \n            stop(\"Cost vector is the wrong length\")\n        if (any(cost &lt;= 0)) \n            stop(\"Cost vector must be positive\")\n    }\n    tfun &lt;- function(x) if (is.matrix(x)) \n        rep(is.ordered(x), ncol(x))\n    else is.ordered(x)\n    labs &lt;- sub(\"^`(.*)`$\", \"\\\\1\", attr(Terms, \"term.labels\"))\n    isord &lt;- unlist(lapply(m[labs], tfun))\n    storage.mode(X) &lt;- \"double\"\n    storage.mode(wt) &lt;- \"double\"\n    temp &lt;- as.double(unlist(init$parms))\n    if (!length(temp)) \n        temp &lt;- 0\n    rpfit &lt;- .Call(C_rpart, ncat = as.integer(cats * !isord), \n        method = as.integer(method.int), as.double(unlist(controls)), \n        temp, as.integer(xval), as.integer(xgroups), as.double(t(init$y)), \n        X, wt, as.integer(init$numy), as.double(cost))\n    nsplit &lt;- nrow(rpfit$isplit)\n    ncat &lt;- if (!is.null(rpfit$csplit)) \n        nrow(rpfit$csplit)\n    else 0\n    if (nsplit == 0) \n        xval &lt;- 0\n    numcp &lt;- ncol(rpfit$cptable)\n    temp &lt;- if (nrow(rpfit$cptable) == 3) \n        c(\"CP\", \"nsplit\", \"rel error\")\n    else c(\"CP\", \"nsplit\", \"rel error\", \"xerror\", \"xstd\")\n    dimnames(rpfit$cptable) &lt;- list(temp, 1:numcp)\n    tname &lt;- c(\"&lt;leaf&gt;\", colnames(X))\n    splits &lt;- matrix(c(rpfit$isplit[, 2:3], rpfit$dsplit), ncol = 5, \n        dimnames = list(tname[rpfit$isplit[, 1] + 1], c(\"count\", \n            \"ncat\", \"improve\", \"index\", \"adj\")))\n    index &lt;- rpfit$inode[, 2]\n    nadd &lt;- sum(isord[rpfit$isplit[, 1]])\n    if (nadd &gt; 0) {\n        newc &lt;- matrix(0, nadd, max(cats))\n        cvar &lt;- rpfit$isplit[, 1]\n        indx &lt;- isord[cvar]\n        cdir &lt;- splits[indx, 2]\n        ccut &lt;- floor(splits[indx, 4])\n        splits[indx, 2] &lt;- cats[cvar[indx]]\n        splits[indx, 4] &lt;- ncat + 1:nadd\n        for (i in 1:nadd) {\n            newc[i, 1:(cats[(cvar[indx])[i]])] &lt;- -as.integer(cdir[i])\n            newc[i, 1:ccut[i]] &lt;- as.integer(cdir[i])\n        }\n        catmat &lt;- if (ncat == 0) \n            newc\n        else {\n            cs &lt;- rpfit$csplit\n            ncs &lt;- ncol(cs)\n            ncc &lt;- ncol(newc)\n            if (ncs &lt; ncc) \n                cs &lt;- cbind(cs, matrix(0, nrow(cs), ncc - ncs))\n            rbind(cs, newc)\n        }\n        ncat &lt;- ncat + nadd\n    }\n    else catmat &lt;- rpfit$csplit\n    if (nsplit == 0) {\n        frame &lt;- data.frame(row.names = 1, var = \"&lt;leaf&gt;\", n = rpfit$inode[, \n            5], wt = rpfit$dnode[, 3], dev = rpfit$dnode[, 1], \n            yval = rpfit$dnode[, 4], complexity = rpfit$dnode[, \n                2], ncompete = 0, nsurrogate = 0)\n    }\n    else {\n        temp &lt;- ifelse(index == 0, 1, index)\n        svar &lt;- ifelse(index == 0, 0, rpfit$isplit[temp, 1])\n        frame &lt;- data.frame(row.names = rpfit$inode[, 1], var = tname[svar + \n            1], n = rpfit$inode[, 5], wt = rpfit$dnode[, 3], \n            dev = rpfit$dnode[, 1], yval = rpfit$dnode[, 4], \n            complexity = rpfit$dnode[, 2], ncompete = pmax(0, \n                rpfit$inode[, 3] - 1), nsurrogate = rpfit$inode[, \n                4])\n    }\n    if (method.int == 3) {\n        numclass &lt;- init$numresp - 2\n        nodeprob &lt;- rpfit$dnode[, numclass + 5]/sum(wt)\n        temp &lt;- pmax(1, init$counts)\n        temp &lt;- rpfit$dnode[, 4 + (1:numclass)] %*% diag(init$parms$prior/temp)\n        yprob &lt;- temp/rowSums(temp)\n        yval2 &lt;- matrix(rpfit$dnode[, 4 + (0:numclass)], ncol = numclass + \n            1)\n        frame$yval2 &lt;- cbind(yval2, yprob, nodeprob)\n    }\n    else if (init$numresp &gt; 1) \n        frame$yval2 &lt;- rpfit$dnode[, -(1:3), drop = FALSE]\n    if (is.null(init$summary)) \n        stop(\"Initialization routine is missing the 'summary' function\")\n    functions &lt;- if (is.null(init$print)) \n        list(summary = init$summary)\n    else list(summary = init$summary, print = init$print)\n    if (!is.null(init$text)) \n        functions &lt;- c(functions, list(text = init$text))\n    if (method == \"user\") \n        functions &lt;- c(functions, mlist)\n    where &lt;- rpfit$which\n    names(where) &lt;- row.names(m)\n    ans &lt;- list(frame = frame, where = where, call = Call, terms = Terms, \n        cptable = t(rpfit$cptable), method = method, parms = init$parms, \n        control = controls, functions = functions, numresp = init$numresp)\n    if (nsplit) \n        ans$splits = splits\n    if (ncat &gt; 0) \n        ans$csplit &lt;- catmat + 2\n    if (nsplit) \n        ans$variable.importance &lt;- importance(ans)\n    if (model) {\n        ans$model &lt;- m\n        if (missing(y)) \n            y &lt;- FALSE\n    }\n    if (y) \n        ans$y &lt;- Y\n    if (x) {\n        ans$x &lt;- X\n        ans$wt &lt;- wt\n    }\n    ans$ordered &lt;- isord\n    if (!is.null(attr(m, \"na.action\"))) \n        ans$na.action &lt;- attr(m, \"na.action\")\n    if (!is.null(xlevels)) \n        attr(ans, \"xlevels\") &lt;- xlevels\n    if (method == \"class\") \n        attr(ans, \"ylevels\") &lt;- init$ylevels\n    class(ans) &lt;- \"rpart\"\n    ans\n})(formula = .outcome ~ ., data = list(c(23, 24, 26, 30, 32, \n30, 27, 23, 25, 22, 25, 31, 32, 28, 30, 24, 30, 28, 28, 29, 25, \n27, 29, 28, 30, 22, 27, 26, 22, 26, 25, 32, 27, 27, 22, 27, 22, \n23, 27, 22, 22, 30, 27, 25, 32, 28, 30, 27, 31, 27, 28, 22, 22, \n28, 32, 28, 23, 31, 27, 29, 30, 25, 29, 25, 28, 30, 19, 20, 20, \n16, 20, 20, 17, 19, 11, 18, 20, 13, 11, 17, 20, 4, 4, 8, 7, 8, \n7, 20, 17, 14, 20, 17, 16, 20, 17, 13, 19, 20, 19, 19, 13, 20, \n13, 16, 15, 16, 20, 13, 19, 14, 20, 19, 10, 12, 13, 15, 16, 11, \n17, 16, 16, 17, 9, 14, 11, 14, 14, 14, 12, 9, 8, 8, 8, 8, 7, \n6, 7, 7, 2, 1, 1, 43, 43, 40, 44, 41, 37, 44, 44, 40, 42, 35, \n40, 43, 37, 41, 40, 40, 33, 33, 41, 38, 43, 44, 40, 44, 38, 35, \n34, 42, 36, 44, 42, 38, 44, 35, 44, 38, 38, 33, 33, 39, 42, 39, \n43, 42, 33, 42, 39, 38, 44, 41, 39, 40, 39, 44, 34, 39, 33, 38, \n35, 43, 39, 39, 43, 35, 39, 41, 40, 37, 44, 36, 39, 33, 38, 35, \n41, 43, 39, 41, 44, 37, 42, 40, 39, 42, 36, 44, 39, 41, 42, 41, \n38, 40, 34, 33, 41, 41, 44, 42, 41, 33, 41, 40, 38, 43, 33, 39, \n38, 43, 39, 39, 33, 43, 39, 35, 41, 40, 35, 37, 39, 40, 33, 40, \n38, 39, 43, 53, 53, 51, 53, 48, 48, 54, 55, 52, 49, 50, 53, 55, \n54, 53, 54, 56, 49, 52, 54, 47, 54, 50, 52, 48, 51, 51, 55, 49, \n53, 48, 52, 45, 49, 54, 50, 54, 49, 53, 47, 55, 49, 46, 54, 48, \n50, 55, 49, 56, 49, 50, 47, 52, 50, 53, 54, 54, 50, 46, 47, 49, \n55, 46, 56, 54, 50, 56, 48, 54, 54, 53, 54, 54, 55, 54, 50, 54, \n47, 54, 51, 51, 54, 54, 55, 56, 53, 51, 53, 48, 54, 55, 50, 52, \n51, 49, 56, 55, 55, 56, 50, 51, 49, 51, 52, 56, 54, 48, 54, 52, \n53, 50, 54, 56, 52, 54, 52, 50, 47, 55, 56, 48, 52, 49, 50, 49, \n54, 47, 50, 54, 47, 56, 54, 48, 49, 45, 56, 48, 51, 55, 46, 49, \n52, 56, 55, 50, 55, 48, 48, 53, 50, 50, 56, 50, 48, 50, 47, 52, \n58, 62, 67, 68, 67, 59, 64, 64, 62, 59, 64, 60, 59, 67, 64, 58, \n65, 64, 60, 59, 67, 67, 66, 68, 61, 64, 66, 68, 57, 64, 68, 65, \n68, 64, 58, 60, 68, 64, 65, 59, 68, 66, 62, 65, 68, 62, 68, 67, \n64, 59, 62, 68, 67, 58, 63, 68, 57, 68, 61, 65, 67, 59, 65, 64, \n61, 61, 65, 66, 67, 68, 65, 66, 63, 65, 65, 67, 61, 65, 64, 58, \n60, 64, 63, 68, 63, 57, 61, 65, 59, 59, 65, 62, 60, 68, 65, 62, \n62, 67, 62, 58, 61, 65, 68, 65, 61, 66, 61, 57, 65, 59, 68, 62, \n65, 68, 65, 62, 65, 67, 67, 59, 60, 61, 57, 59, 68, 65, 61, 67, \n65, 63, 68, 68, 66, 61, 67, 59, 61, 62, 67, 68, 65, 62, 66, 68, \n63, 62, 60, 67, 61, 64, 64, 64, 58, 58, 67, 63, 64, 57, 59, 62, \n60, 63, 67, 62, 60, 64, 65, 68, 68, 67, 58, 63, 63, 65, 67, 68, \n59, 65, 68, 68, 61, 62, 65, 67, 65, 59, 68, 60, 64, 68, 57, 62, \n68, 62, 65, 63, 65, 67, 60, 68, 66, 66, 61, 65, 67, 68, 68, 60, \n62, 68, 68, 65, 59, 62, 59, 60, 68, 57, 65, 61, 67, 63, 63, 65, \n65, 68, 65, 66, 65, 60, 66, 67, 58, 62, 63, 65, 61, 63, 63, 63, \n59, 62, 63, 60, 65, 63, 68, 60, 61, 61, 57, 57, 62, 65, 68, 64, \n67, 57, 66, 61, 65, 61, 66, 59, 61, 65, 63, 62, 68, 65, 63, 65, \n65, 57, 57, 65, 66, 63, 63, 60, 57, 64, 67, 63, 64, 66, 66, 61, \n68, 60, 62, 59, 63, 66, 65, 65, 57, 64, 58, 68, 57, 65, 59, 57, \n68, 60, 57, 68, 62, 62, 58, 66, 62, 67, 66, 73, 79, 78, 79, 74, \n77, 76, 76, 78, 70, 73, 77, 78, 78, 73, 78, 76, 70, 75, 69, 75, \n77, 80, 71, 79, 74, 80, 79, 77, 74, 77, 80, 72, 75, 74, 70, 76, \n74, 75, 74, 80, 77, 76, 74, 78, 73, 76, 71, 73, 72, 73, 80, 76, \n72, 80, 78, 71, 75, 74, 71, 72, 77, 80, 74, 74, 73, 80, 75, 75, \n75, 74, 74, 78, 80, 75, 80, 73, 79, 69, 79, 77, 78, 73, 73, 74, \n78, 74, 79, 78, 79, 80, 80, 80, 79, 72, 77, 80, 80, 72, 70, 78, \n71, 78, 77, 70, 78, 74, 73, 75, 73, 72, 70, 78, 73, 80, 80, 79, \n80, 70, 80, 70, 73, 79, 73, 78, 80, 76, 69, 71, 71, 78, 78, 75, \n80, 71, 79, 70, 78, 69, 78, 77, 72, 75, 76, 73, 80, 71, 72, 77, \n72, 78, 78, 71, 69, 69, 78, 80, 69, 75, 80, 75, 75, 75, 80, 76, \n77, 79, 78, 71, 78, 78, 77, 80, 79, 78, 76, 77, 76, 80, 75, 73, \n79, 76, 76, 78, 70, 80, 80, 78, 80, 75, 75, 80, 79, 75, 80, 80, \n80, 77, 74, 77, 75, 70, 79, 70, 76, 70, 72, 79, 69, 77, 76, 76, \n80, 73, 71, 70, 69, 75, 80, 70, 80, 78, 75, 76, 75, 69, 80, 73, \n79, 69, 76, 77, 78, 75, 69, 73, 70, 69, 80, 71, 70, 71, 78, 73, \n70, 69, 80, 76, 69, 74, 72, 79, 79, 73, 75, 76, 78, 80, 73, 78, \n71, 78, 80, 69, 71, 70, 76), c(2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, \n2002, 2002, 2002, 2002, 2002, 2002, 2003, 2003, 2003, 2003, 2003, \n2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2004, \n2004, 2004, 2004, 2004, 2004, 2003, 2003, 2003, 2003, 2003, 2003, \n2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, \n2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, \n2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, \n2003, 2003, 2003, 2003, 2004, 2004, 2004, 2004, 2004, 2004, 2004, \n2004, 2004, 2004, 2004, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, \n2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, \n2000, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, \n1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, 1998, \n1998), c(72937, 41711, 48000, 38500, 61000, 75889, 19700, 71138, \n31461, 43610, 32189, 23000, 34131, 18739, 34000, 25563, 67660, \n56349, 32220, 25813, 28450, 34545, 41415, 44142, 11090, 35199, \n29510, 32692, 41000, 43000, 25000, 25329, 27500, 44068, 46961, \n110404, 100250, 84000, 79375, 75048, 62636, 57086, 49866, 49163, \n45725, 43210, 38950, 37177, 36544, 32809, 30993, 30400, 30000, \n29206, 29198, 28000, 28000, 25266, 23489, 22575, 22000, 20019, \n20000, 17003, 8537, 7000, 51884, 48110, 37500, 34472, 33329, \n31850, 30351, 29435, 24500, 23902, 23175, 18000, 16123, 10000, \n7187, 1, 4000, 13253, 10000, 6000, 1, 63000, 57313, 40010, 39115, \n36012, 36000, 36000, 33740, 33477, 29441, 29000, 27821, 27371, \n25170, 22588, 21428, 20629, 20270, 20105, 20000, 19988, 18328, \n17896, 17300, 17038, 13747, 13634, 13178, 13157, 13000, 12500, \n11999, 11754, 11000, 10000, 7650, 6500, 6155, 6000, 5459, 5278, \n5000, 1, 11000, 10077, 10000, 7000, 6250, 3000, 2000, 450, 15, \n1, 1, 243000, 178858, 161000, 131273, 123425, 118217, 110000, \n96829, 96518, 92204, 91456, 85389, 85017, 82743, 81106, 80425, \n78425, 77321, 75699, 75697, 74319, 74285, 74172, 73042, 71793, \n67805, 65988, 65345, 64564, 63459, 63451, 61300, 60829, 60500, \n59500, 59000, 58798, 58363, 57711, 57269, 56001, 55968, 55678, \n55539, 55400, 55350, 53719, 53644, 53000, 52084, 51732, 50873, \n50640, 50000, 49332, 49291, 48945, 48928, 48197, 48052, 48000, \n46821, 46694, 46515, 46304, 45713, 45287, 44830, 44757, 44218, \n43427, 43254, 42823, 41754, 41000, 39659, 39650, 39524, 39439, \n39000, 38812, 38665, 38653, 37782, 37000, 36269, 36066, 34599, \n34000, 33623, 33000, 32781, 32532, 32431, 31000, 30989, 29716, \n29716, 29640, 29056, 28715, 28571, 28362, 28150, 27301, 27240, \n27170, 26000, 25228, 25062, 24723, 24650, 24553, 24444, 24011, \n24000, 23616, 21904, 21500, 18500, 17051, 16512, 16325, 16000, \n12000, 10000, 216000, 176000, 146736, 143513, 142130, 140700, \n138394, 137000, 135258, 131364, 126110, 117913, 117175, 115558, \n115113, 115046, 113997, 107859, 104805, 103454, 102352, 101352, \n99865, 99323, 98100, 98040, 96135, 94401, 91340, 90097, 89049, \n89000, 87274, 86221, 84598, 82735, 81905, 80320, 79800, 78785, \n77780, 77648, 75249, 75231, 75045, 74849, 74715, 74656, 74500, \n74494, 73634, 73403, 73000, 72242, 72000, 71725, 71276, 70440, \n69574, 69000, 68565, 68520, 68414, 66777, 66063, 65471, 65400, \n64193, 64000, 63792, 63635, 63135, 63123, 63000, 62519, 61672, \n61000, 60348, 60239, 59000, 58761, 58745, 58530, 58377, 58142, \n57948, 57645, 57475, 56675, 55877, 54900, 54465, 53561, 53408, \n53116, 52448, 52149, 52141, 52000, 50400, 50000, 49568, 49473, \n49432, 48731, 48370, 48071, 47852, 47689, 47451, 47219, 46856, \n46500, 46449, 46230, 46029, 46000, 45850, 44537, 43700, 43120, \n41700, 41636, 41273, 40836, 40325, 40000, 39706, 39000, 38900, \n37461, 37000, 36005, 36000, 36000, 35230, 35142, 34882, 33230, \n33021, 31999, 31579, 31000, 30461, 29686, 29650, 28656, 26938, \n26624, 22648, 22500, 19313, 17619, 15000, 10210, 5309, 31000, \n205000, 183500, 174833, 155720, 155500, 154783, 154462, 150585, \n147636, 144521, 144000, 139800, 137050, 135337, 133769, 133405, \n132807, 132393, 130270, 130000, 127000, 126800, 126452, 125000, \n123000, 120400, 120000, 119289, 118833, 118000, 117955, 117609, \n117000, 116000, 115715, 115191, 115071, 114846, 114383, 112827, \n112116, 112000, 112000, 111769, 110287, 109547, 109150, 108793, \n106784, 105000, 105000, 104299, 104000, 103458, 103400, 101889, \n101791, 101001, 100748, 100550, 99781, 98658, 98500, 98291, 97648, \n97425, 97173, 97046, 96000, 95000, 95000, 94606, 94504, 93428, \n93408, 92922, 92498, 92226, 91333, 91000, 89576, 89145, 89000, \n88807, 88685, 88480, 88127, 87821, 87654, 86888, 85889, 85000, \n85000, 84976, 84558, 84549, 83908, 83560, 82421, 82254, 82115, \n82000, 81965, 81192, 81170, 81083, 80714, 80470, 80439, 80430, \n80426, 80265, 80153, 80121, 80086, 80000, 80000, 79858, 79762, \n79660, 79150, 79000, 78955, 78750, 78521, 78076, 78063, 77821, \n77500, 77457, 77029, 77008, 76791, 76700, 76569, 76162, 75609, \n75569, 75429, 75000, 75000, 75000, 74963, 74875, 74747, 74457, \n74337, 73936, 73894, 73500, 73376, 73300, 73172, 72928, 72880, \n72522, 72000, 72000, 71366, 71000, 70954, 70908, 70552, 70500, \n70453, 70116, 70068, 70000, 69103, 69000, 68723, 68453, 68238, \n68000, 67762, 67146, 67010, 67003, 66785, 66550, 66259, 66082, \n66000, 65785, 65513, 65463, 65400, 65259, 65000, 65000, 65000, \n64966, 64950, 64797, 64772, 64690, 64630, 64613, 64383, 64000, \n63881, 63328, 63000, 62396, 62316, 62292, 62222, 61977, 61930, \n61568, 61504, 61384, 61166, 61149, 61127, 61100, 61100, 61000, \n60724, 60532, 60000, 59000, 59000, 59000, 59000, 58860, 58829, \n58654, 58300, 58269, 58113, 58058, 58000, 58000, 57413, 57374, \n57169, 57124, 57000, 57000, 56259, 56209, 55942, 55085, 55000, \n54936, 54875, 54554, 54125, 54000, 54000, 54000, 53285, 53053, \n53000, 52968, 52800, 52548, 52383, 51235, 51000, 50925, 50806, \n50469, 50173, 49942, 48738, 47750, 47500, 47014, 46000, 45681, \n45549, 45000, 45000, 45000, 45000, 45000, 44944, 43426, 43000, \n43000, 42102, 41586, 41200, 39222, 39144, 38019, 37759, 37111, \n37000, 36954, 36923, 36658, 36000, 35283, 35000, 34114, 34000, \n33847, 33535, 33000, 32150, 31307, 30300, 28500, 28000, 26698, \n26000, 25505, 25000, 22835, 17345, 15535, 15110, 232940, 218118, \n217764, 207114, 203254, 200732, 191620, 183277, 180378, 178800, \n176177, 172980, 161775, 159968, 158492, 155210, 154900, 151300, \n150000, 146304, 146197, 145996, 143560, 139145, 138500, 137741, \n137178, 131500, 131307, 130025, 128960, 128351, 126478, 125400, \n124910, 124743, 124591, 124057, 123104, 123077, 122820, 122290, \n120263, 120196, 120000, 115877, 115345, 115157, 112963, 112000, \n111602, 111392, 110901, 110634, 110000, 109263, 107516, 107000, \n106250, 106150, 105856, 105152, 105135, 104150, 104000, 103121, \n102300, 102005, 101855, 101159, 101000, 100732, 100487, 100458, \n100192, 100123, 99971, 99397, 99374, 98742, 98000, 97534, 97494, \n97085, 96302, 96000, 96000, 95700, 95651, 95000, 94447, 94079, \n93841, 93090, 93066, 93000, 92255, 92096, 91921, 91900, 91399, \n90370, 90011, 90000, 89983, 89953, 88700, 88186, 87613, 87358, \n87083, 87000, 87000, 87000, 87000, 86109, 86000, 86000, 85864, \n85565, 85000, 84988, 84966, 84402, 84000, 83540, 83405, 83133, \n83047, 82700, 82675, 82595, 82256, 82021, 82000, 81988, 81663, \n80000, 79000, 78689, 78435, 78120, 76382, 76268, 76151, 76000, \n76000, 75840, 75799, 75525, 75323, 75226, 75085, 75000, 75000, \n74926, 74785, 74573, 74567, 74196, 74096, 74000, 73460, 73200, \n73116, 72703, 72328, 72222, 72128, 72090, 72000, 71900, 71740, \n71263, 71186, 71000, 70932, 70039, 69904, 69388, 68988, 68945, \n68000, 67266, 67255, 67100, 66880, 66168, 65500, 65307, 65006, \n64000, 64000, 63918, 63634, 63500, 63266, 62581, 61906, 61700, \n61648, 61626, 61510, 61165, 61000, 60833, 60600, 60483, 60142, \n60050, 60000, 60000, 59815, 59326, 59240, 59164, 59017, 58952, \n58341, 58267, 57829, 57787, 57628, 57537, 57263, 57144, 57096, \n57000, 56566, 55425, 53809, 53133, 52900, 52287, 52000, 52000, \n52000, 51874, 49640, 49580, 48576, 47955, 47633, 47400, 47360, \n44850, 44826, 44444, 43532, 42800, 42317, 42000, 40093, 39800, \n39168, 38945, 36537, 36000, 35821, 34717, 30964, 29000, 24000, \n23000, 20544, 17016, 16916, 1), c(1, 1, 1, 1, 1, 1, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, \n1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, \n1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, \n1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, \n1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, \n0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, \n0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, \n0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, \n0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), c(90, 90, 90, 90, 90, 90, 192, \n69, 192, 192, 192, 192, 192, 192, 192, 110, 110, 110, 110, 110, \n110, 110, 110, 110, 110, 97, 97, 97, 97, 97, 97, 97, 97, 97, \n97, 90, 90, 90, 90, 97, 90, 97, 192, 110, 110, 97, 110, 110, \n110, 97, 110, 97, 110, 97, 97, 110, 110, 110, 110, 110, 97, 110, \n110, 97, 110, 97, 97, 97, 90, 90, 97, 110, 90, 97, 110, 97, 110, \n71, 110, 97, 110, 116, 116, 116, 116, 90, 110, 90, 110, 110, \n110, 110, 110, 110, 97, 110, 97, 97, 97, 97, 110, 97, 110, 110, \n110, 97, 110, 110, 110, 110, 97, 110, 97, 110, 110, 97, 110, \n110, 110, 110, 110, 110, 110, 110, 97, 110, 110, 110, 110, 98, \n110, 97, 97, 110, 110, 110, 110, 97, 110, 98, 110, 69, 110, 69, \n69, 69, 110, 69, 110, 97, 110, 69, 110, 97, 110, 69, 90, 110, \n110, 69, 97, 110, 110, 110, 110, 110, 110, 110, 97, 110, 97, \n97, 97, 110, 110, 69, 110, 110, 110, 90, 110, 110, 110, 110, \n110, 110, 110, 110, 110, 110, 97, 97, 110, 110, 97, 110, 110, \n110, 69, 110, 69, 110, 97, 110, 97, 97, 97, 110, 110, 97, 97, \n110, 110, 110, 110, 110, 110, 110, 97, 97, 97, 97, 110, 110, \n97, 97, 110, 110, 110, 110, 97, 110, 110, 110, 97, 110, 110, \n116, 110, 110, 97, 110, 110, 110, 110, 110, 110, 97, 97, 110, \n110, 110, 110, 110, 110, 97, 97, 110, 97, 110, 110, 97, 97, 110, \n97, 110, 97, 69, 69, 110, 69, 110, 69, 69, 72, 69, 110, 110, \n69, 110, 110, 97, 69, 72, 97, 97, 110, 110, 110, 110, 110, 69, \n110, 72, 72, 110, 69, 97, 110, 110, 110, 110, 97, 110, 110, 110, \n110, 110, 110, 110, 110, 110, 110, 110, 69, 97, 110, 110, 110, \n110, 110, 97, 110, 110, 69, 97, 69, 110, 72, 97, 110, 110, 97, \n97, 110, 97, 110, 110, 110, 110, 110, 97, 110, 69, 110, 110, \n97, 97, 110, 110, 110, 110, 97, 110, 110, 97, 110, 97, 110, 97, \n110, 97, 97, 97, 110, 97, 110, 86, 110, 110, 110, 110, 110, 97, \n110, 110, 110, 110, 97, 86, 110, 110, 110, 97, 97, 97, 86, 97, \n97, 110, 97, 110, 86, 110, 110, 97, 97, 97, 97, 97, 110, 110, \n97, 110, 110, 110, 110, 97, 97, 97, 86, 110, 86, 97, 110, 97, \n97, 97, 97, 110, 97, 97, 110, 97, 72, 72, 72, 86, 110, 72, 72, \n110, 72, 72, 110, 72, 110, 110, 72, 72, 72, 72, 110, 72, 72, \n72, 110, 72, 72, 110, 72, 110, 110, 72, 110, 86, 72, 86, 110, \n110, 110, 110, 90, 86, 110, 110, 72, 110, 110, 110, 110, 110, \n110, 86, 86, 110, 86, 86, 110, 110, 72, 110, 110, 110, 110, 86, \n110, 86, 110, 110, 86, 86, 110, 110, 110, 110, 86, 110, 86, 72, \n110, 110, 110, 110, 110, 86, 110, 110, 110, 110, 86, 86, 86, \n110, 110, 110, 86, 110, 110, 110, 110, 86, 110, 110, 110, 86, \n86, 110, 110, 86, 110, 110, 110, 110, 110, 86, 110, 110, 110, \n110, 86, 110, 86, 86, 110, 110, 86, 90, 86, 86, 107, 110, 110, \n110, 86, 86, 110, 86, 86, 110, 86, 72, 110, 110, 86, 110, 107, \n110, 110, 110, 86, 86, 110, 110, 110, 86, 110, 110, 86, 110, \n86, 86, 110, 110, 110, 86, 110, 110, 72, 110, 110, 86, 110, 110, \n86, 110, 86, 110, 110, 110, 110, 110, 86, 86, 110, 110, 86, 110, \n110, 110, 86, 110, 110, 110, 110, 86, 110, 110, 110, 86, 110, \n110, 86, 110, 86, 86, 86, 110, 110, 110, 110, 86, 110, 110, 110, \n110, 110, 86, 110, 86, 110, 110, 86, 110, 86, 110, 86, 110, 110, \n110, 110, 110, 86, 110, 107, 110, 110, 110, 107, 110, 110, 110, \n110, 86, 86, 107, 110, 107, 86, 110, 110, 110, 110, 110, 110, \n110, 110, 110, 86, 110, 86, 110, 86, 86, 86, 110, 86, 110, 110, \n110, 110, 86, 86, 86, 86, 110, 86, 110, 110, 110, 86, 110, 110, \n110, 110, 86, 110, 110, 110, 86, 110, 110, 110, 110, 86, 110, \n86, 110, 86, 86, 86, 110, 110, 86, 110, 110, 110, 110, 86, 110, \n86, 110, 107, 86, 110, 110, 110, 86, 86, 72, 72, 72, 110, 72, \n72, 72, 72, 72, 72, 110, 72, 86, 72, 86, 110, 72, 72, 72, 72, \n86, 110, 86, 73, 86, 90, 90, 72, 110, 110, 110, 110, 110, 110, \n72, 110, 110, 110, 110, 86, 86, 110, 72, 110, 110, 110, 110, \n110, 72, 86, 86, 110, 110, 86, 110, 110, 110, 110, 110, 86, 86, \n86, 110, 110, 86, 86, 86, 107, 110, 110, 86, 86, 110, 110, 110, \n110, 110, 86, 86, 110, 110, 110, 110, 110, 86, 86, 110, 110, \n110, 86, 110, 110, 110, 86, 110, 110, 107, 86, 86, 86, 110, 86, \n86, 86, 110, 110, 110, 72, 86, 110, 110, 110, 110, 86, 86, 110, \n86, 110, 72, 110, 110, 110, 110, 110, 110, 110, 110, 86, 86, \n110, 86, 86, 110, 86, 110, 110, 110, 110, 86, 110, 86, 110, 110, \n86, 86, 110, 110, 86, 110, 110, 86, 110, 86, 86, 86, 110, 110, \n110, 86, 110, 110, 86, 110, 110, 110, 110, 110, 110, 107, 110, \n110, 86, 110, 86, 110, 110, 110, 110, 110, 86, 86, 110, 110, \n86, 110, 110, 110, 86, 86, 110, 86, 107, 110, 110, 110, 110, \n110, 110, 86, 110, 110, 86, 110, 107, 110, 110, 86, 110, 110, \n110, 110, 110, 110, 110, 110, 110, 107, 110, 86, 110, 110, 86, \n110, 86, 110, 110, 86, 86, 110, 110, 110, 110, 110, 110, 110, \n110, 110, 86, 110, 110, 86, 110, 110, 86, 86, 110, 110, 110, \n110, 110, 107, 110, 110, 107, 86, 110, 110, 110, 86, 86, 110, \n86, 86, 86, 86, 86, 86, 110), c(1, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, \n1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, \n0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, \n1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, \n1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, \n1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, \n0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, \n1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, \n1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, \n0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, \n1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, \n1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, \n0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, \n0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, \n0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, \n1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, \n0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, \n1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, \n0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, \n0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, \n0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, \n1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, \n1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, \n1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, \n1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, \n1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, \n0, 0, 0, 1, 1, 0, 1, 0, 1, 0), c(0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, \n1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c(0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, \n1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, \n0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, \n1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 1, 0, 1, 1, 1, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, \n1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, \n1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, \n0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 1), c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \n1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, \n0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, \n0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \n1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, \n1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, \n1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0), c(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, \n0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, \n1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, \n1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, \n0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, \n0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \n0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0), c(1, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, \n1, 0, 1, 1, 1, 0, 0, 0, 0, 0), c(2000, 2000, 2000, 2000, 2000, \n2000, 1800, 1900, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1600, \n1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1400, 1400, \n1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 2000, 2000, 2000, \n2000, 1400, 2000, 1400, 1800, 1600, 1600, 1400, 1600, 1600, 1600, \n1400, 1600, 1400, 2000, 1400, 1400, 1600, 1600, 1600, 1600, 1600, \n1400, 16000, 1600, 1400, 1600, 1400, 1400, 1400, 2000, 1995, \n1400, 1600, 1995, 1400, 1600, 1400, 1600, 1400, 1600, 1400, 1600, \n2000, 2000, 2000, 2000, 2000, 1600, 2000, 2000, 1600, 1600, 1600, \n1600, 1600, 1400, 1600, 1400, 1400, 1400, 1400, 1600, 1400, 1600, \n1600, 1600, 1400, 1600, 1600, 1600, 1600, 1400, 1600, 1400, 1600, \n1600, 1400, 1600, 1600, 1600, 1600, 1600, 1598, 1600, 1600, 1400, \n1600, 1600, 1600, 1600, 1400, 1600, 1400, 1400, 1600, 1600, 1600, \n1600, 1400, 1600, 1400, 1600, 1900, 1600, 1900, 1800, 1900, 1600, \n1900, 1600, 1400, 1600, 1900, 1600, 1400, 1600, 1900, 2000, 1600, \n1600, 1900, 1400, 1600, 1600, 1600, 1598, 1600, 1600, 1600, 1400, \n1600, 1400, 1400, 1400, 1600, 1600, 1900, 1600, 1600, 1600, 2000, \n1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1400, \n1400, 1600, 1600, 1400, 1600, 1600, 1600, 1900, 1600, 1900, 1600, \n1400, 1600, 1400, 1400, 1400, 1600, 1600, 1400, 1400, 1600, 1600, \n1600, 1600, 1600, 1600, 1600, 1398, 1400, 1400, 1400, 1600, 1600, \n1400, 1400, 1600, 1600, 1600, 1600, 1400, 1600, 1600, 1600, 1400, \n1600, 1600, 1600, 1600, 1600, 1400, 1600, 1600, 1600, 1600, 1600, \n1600, 1400, 1400, 1600, 1600, 1600, 1600, 1600, 1600, 1400, 1400, \n1600, 1400, 1600, 1600, 1400, 1400, 1600, 1400, 1600, 1400, 1900, \n1900, 1600, 1900, 1600, 1900, 1900, 2000, 1900, 1600, 1600, 1900, \n1600, 1600, 1400, 1900, 2000, 1400, 1400, 1600, 1600, 1600, 1600, \n1600, 1900, 1600, 2000, 2000, 1600, 1900, 1400, 1600, 1600, 1600, \n1600, 1400, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, \n1600, 1600, 1900, 1400, 1600, 1587, 1600, 1600, 1600, 1400, 1600, \n1600, 1900, 1400, 1900, 1600, 2000, 1400, 1600, 1600, 1400, 1400, \n1600, 1400, 1600, 1600, 1600, 1600, 1600, 1400, 1600, 2000, 1600, \n1600, 1400, 1300, 1600, 1600, 1600, 1600, 1400, 1600, 1600, 1400, \n1600, 1400, 1600, 1400, 1600, 1400, 1400, 1400, 1600, 1400, 1600, \n1300, 1600, 1600, 1600, 1600, 1600, 1400, 1600, 1600, 1600, 1600, \n1400, 1300, 1600, 1600, 1600, 1400, 1400, 1400, 1300, 1400, 1400, \n1600, 1400, 1600, 1300, 1600, 1600, 1400, 1400, 1400, 1400, 1400, \n1600, 1600, 1400, 1600, 1600, 1600, 1600, 1400, 1400, 1400, 1300, \n1600, 1300, 1400, 1600, 1400, 1400, 1400, 1400, 1600, 1400, 1400, \n1600, 1398, 2000, 2000, 2000, 1300, 1600, 2000, 2000, 1600, 2000, \n2000, 1600, 2000, 1600, 1600, 2000, 2000, 2000, 2000, 1600, 2000, \n2000, 2000, 1600, 2000, 2000, 1600, 2000, 1600, 1600, 2000, 1600, \n1300, 2000, 1300, 1600, 1600, 1600, 1600, 2000, 1300, 1600, 1600, \n2000, 1600, 1600, 1600, 1600, 1600, 1600, 1300, 1300, 1600, 1300, \n1300, 1600, 1600, 2000, 1600, 1600, 1600, 1600, 1300, 1600, 1300, \n1600, 1600, 1300, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1300, \n2000, 1600, 1600, 1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, \n1300, 1300, 1300, 1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, \n1300, 1600, 1600, 1600, 1300, 1300, 1600, 1600, 1300, 1600, 1600, \n1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1300, \n1300, 1600, 1600, 1300, 1975, 1300, 1300, 1600, 1600, 1600, 1600, \n1300, 1300, 1600, 1300, 1300, 1600, 1300, 2000, 1600, 1600, 1300, \n1600, 1600, 1600, 1600, 1600, 1300, 1300, 1600, 1600, 1600, 1300, \n1600, 1600, 1332, 1600, 1300, 1300, 1600, 1600, 1600, 1300, 1600, \n1600, 2000, 1600, 1600, 1300, 1600, 1600, 1300, 1600, 1300, 1600, \n1600, 1600, 1600, 1600, 1300, 1332, 1600, 1600, 1300, 1600, 1600, \n1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1600, 1600, 1300, \n1600, 1600, 1300, 1600, 1300, 1300, 1300, 1600, 1600, 1600, 1600, \n1300, 1600, 1600, 1600, 1600, 1600, 1300, 1600, 1300, 1600, 1600, \n1300, 1600, 1300, 1600, 1300, 1600, 1600, 1600, 1600, 1600, 1300, \n1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1300, \n1300, 1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, 1600, 1600, \n1600, 1600, 1600, 1300, 1600, 1300, 1600, 1300, 1300, 1300, 1600, \n1300, 1600, 1600, 1600, 1600, 1300, 1300, 1300, 1300, 1600, 1300, \n1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1600, \n1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1300, 1600, 1300, \n1300, 1300, 1600, 1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, \n1300, 1600, 1600, 1300, 1600, 1600, 1600, 1300, 1300, 2000, 2000, \n2000, 1600, 2000, 2000, 2000, 2000, 2000, 2000, 1600, 2000, 1300, \n2000, 1300, 1600, 2000, 2000, 2000, 2000, 1300, 1600, 1300, 2000, \n1300, 2000, 2000, 2000, 1600, 1600, 1600, 1600, 1600, 1600, 2000, \n1600, 1600, 1600, 1600, 1300, 1300, 1600, 2000, 1600, 1600, 1600, \n1600, 1600, 2000, 1300, 1300, 1598, 1600, 1300, 1600, 1600, 1600, \n1600, 1600, 1300, 1300, 1300, 1600, 1600, 1300, 1300, 1300, 1600, \n1600, 1600, 1300, 1300, 1600, 1600, 1600, 1600, 1600, 1300, 1300, \n1600, 1600, 1600, 1600, 1600, 1300, 1300, 1600, 1600, 1600, 1300, \n1600, 1600, 1600, 1300, 1600, 1600, 1600, 1300, 1300, 1300, 1600, \n1300, 1300, 1300, 1600, 1600, 1600, 2000, 1300, 1600, 1600, 1600, \n1600, 1300, 1300, 1600, 1300, 1600, 2000, 1600, 1600, 1600, 1600, \n1600, 1600, 1600, 1600, 1300, 1300, 1600, 1300, 1300, 1600, 1300, \n1600, 1600, 1600, 1600, 1300, 1600, 1300, 1600, 1600, 1300, 1300, \n1600, 1600, 1300, 1600, 1600, 1300, 1600, 1300, 1300, 1300, 1600, \n1600, 1600, 1300, 1600, 1600, 1300, 1600, 1600, 1600, 1600, 1600, \n1600, 1600, 1600, 1600, 1300, 1600, 1300, 1600, 1600, 1600, 1600, \n1600, 1300, 1300, 1600, 1600, 1300, 1600, 1600, 1600, 1300, 1300, \n1600, 1300, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1300, 1600, \n1600, 1300, 1600, 1600, 1600, 1600, 1300, 1600, 1600, 1600, 1600, \n1600, 1587, 1600, 1600, 1600, 1600, 1600, 1300, 1600, 1600, 1300, \n1600, 1300, 1600, 1600, 1300, 1300, 1600, 1600, 1600, 1600, 1600, \n1600, 1600, 1600, 1600, 1300, 1600, 1600, 1300, 1600, 1600, 1300, \n1300, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1300, \n1600, 1600, 1600, 1300, 1300, 1600, 1300, 1300, 1300, 1300, 1300, \n1300, 1600), c(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 4, \n5, 5, 4, 5, 5, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 3, \n3, 3, 5, 5, 5, 5, 5, 3, 5, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 5, \n5, 5, 4, 5, 3, 5, 5, 5, 3, 3, 5, 5, 3, 5, 5, 3, 3, 5, 5, 3, 4, \n5, 5, 5, 5, 5, 5, 3, 3, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 5, 3, 5, \n5, 5, 5, 5, 3, 5, 3, 5, 5, 3, 5, 3, 3, 3, 5, 3, 3, 5, 5, 5, 3, \n5, 3, 5, 5, 3, 5, 5, 3, 5, 5, 3, 5, 3, 3, 5, 5, 5, 3, 5, 3, 5, \n5, 5, 3, 5, 4, 3, 5, 3, 3, 3, 5, 3, 5, 4, 5, 5, 5, 5, 5, 5, 3, \n3, 5, 5, 5, 5, 4, 5, 5, 5, 3, 5, 4, 4, 3, 5, 5, 5, 3, 5, 5, 5, \n4, 3, 5, 5, 3, 3, 3, 5, 5, 5, 3, 3, 5, 3, 5, 3, 5, 5, 3, 4, 4, \n5, 3, 4, 5, 3, 3, 5, 5, 5, 3, 3, 3, 4, 5, 3, 5, 5, 4, 3, 3, 5, \n5, 5, 3, 3, 3, 5, 4, 3, 4, 4, 3, 5, 5, 4, 5, 3, 5, 4, 5, 3, 5, \n3, 5, 3, 3, 5, 5, 5, 5, 5, 3, 3, 3, 5, 3, 5, 5, 3, 3, 3, 3, 5, \n3, 4, 5, 3, 5, 5, 5, 4, 3, 4, 3, 5, 3, 3, 3, 3, 5, 5, 3, 5, 5, \n5, 3, 3, 3, 3, 5, 5, 3, 3, 3, 5, 3, 5, 3, 3, 3, 5, 3, 3, 3, 3, \n5, 5, 3, 3, 4, 3, 5, 3, 3, 4, 5, 4, 3, 5, 3, 5, 3, 5, 5, 3, 3, \n3, 5, 3, 5, 5, 5, 3, 4, 5, 5, 5, 3, 5, 5, 4, 4, 3, 5, 4, 3, 3, \n5, 5, 4, 3, 5, 3, 5, 5, 3, 4, 3, 3, 5, 5, 4, 3, 3, 5, 5, 3, 3, \n5, 5, 3, 5, 5, 5, 5, 3, 5, 4, 3, 5, 3, 4, 3, 3, 3, 3, 4, 5, 3, \n4, 3, 3, 3, 5, 4, 3, 5, 3, 5, 3, 3, 3, 5, 3, 3, 3, 3, 4, 5, 5, \n5, 3, 3, 5, 3, 3, 5, 3, 4, 3, 5, 5, 4, 3, 3, 3, 5, 5, 4, 5, 2, \n4, 3, 5, 5, 3, 5, 5, 3, 3, 5, 5, 3, 3, 3, 3, 5, 5, 3, 5, 3, 3, \n3, 5, 3, 5, 3, 5, 5, 5, 5, 5, 3, 3, 5, 3, 5, 5, 3, 3, 3, 3, 3, \n5, 3, 5, 5, 5, 5, 4, 5, 3, 4, 3, 3, 5, 5, 5, 3, 5, 3, 4, 3, 3, \n3, 5, 3, 5, 4, 5, 4, 3, 3, 5, 4, 3, 5, 5, 3, 3, 5, 5, 3, 5, 3, \n5, 3, 3, 3, 3, 5, 3, 4, 4, 4, 3, 3, 5, 3, 3, 5, 3, 3, 3, 4, 3, \n5, 5, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3, 5, 5, 3, 3, 3, 5, 3, 3, 5, \n5, 3, 5, 5, 3, 5, 3, 5, 3, 5, 5, 3, 3, 3, 3, 3, 4, 3, 5, 3, 5, \n5, 3, 5, 5, 5, 3, 5, 3, 3, 5, 3, 5, 5, 4, 4, 5, 5, 3, 5, 5, 5, \n3, 3, 5, 5, 3, 3, 3, 5, 3, 3, 3, 5, 3, 5, 4, 4, 3, 5, 5, 4, 5, \n3, 3, 3, 5, 5, 3, 3, 4, 5, 5, 5, 5, 5, 3, 4, 5, 3, 4, 3, 5, 5, \n3, 3, 3, 3, 5, 5, 3, 3, 3, 4, 3, 2, 5, 5, 5, 5, 3, 3, 5, 5, 4, \n3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 4, 5, 3, 5, 3, 3, 3, 5, 3, \n4, 5, 3, 3, 5, 3, 3, 3, 3, 3, 3, 5, 3, 5, 5, 5, 3, 4, 4, 5, 3, \n3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, \n5, 5, 3, 3, 5, 5, 3, 3, 3, 5, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 5, \n3, 5, 5, 3, 3, 5, 4, 5, 5, 5, 3, 3, 3, 3, 3, 3, 5, 5, 5, 3, 4, \n3, 4, 3, 5, 3, 3, 3, 3, 5, 5, 3, 3, 5, 4, 5, 4, 4, 5, 5, 5, 3, \n5, 3, 3, 5, 5, 5, 3, 5, 5, 5, 5, 4, 3, 5, 3, 3, 3, 3, 3, 5, 3, \n5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 4, 5, 5, 5, 5, \n5, 4, 3, 4, 4, 3, 5, 3, 3, 3, 3, 3, 5, 3, 4, 3, 3, 4, 5, 3, 3, \n5, 5, 3, 5, 3, 4, 3, 5, 3, 5, 4, 5, 5, 3, 4, 4, 4, 4, 3, 5, 5, \n5, 3, 3, 5, 3, 5, 3, 5, 3, 5, 3, 3, 3, 4, 3, 3, 3, 3, 3, 5, 3, \n3, 3, 3, 5), c(5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, \n5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, \n6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, \n5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, \n5, 5, 5, 5), c(210, 210, 210, 210, 210, 210, 100, 185, 100, 100, \n100, 100, 100, 100, 100, 19, 85, 85, 85, 85, 85, 85, 85, 85, \n85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 234, 234, 234, 234, \n85, 234, 85, 100, 100, 85, 85, 85, 85, 85, 85, 85, 85, 234, 85, \n85, 85, 85, 85, 85, 85, 85, 100, 85, 85, 85, 85, 85, 85, 234, \n234, 85, 85, 234, 85, 85, 85, 85, 85, 85, 85, 85, 283, 283, 234, \n234, 234, 85, 234, 234, 85, 85, 85, 85, 19, 85, 19, 85, 85, 85, \n85, 19, 85, 85, 85, 85, 85, 100, 85, 85, 85, 85, 85, 85, 85, \n85, 85, 85, 85, 85, 100, 85, 85, 85, 85, 85, 85, 85, 85, 85, \n19, 85, 85, 85, 85, 85, 85, 19, 85, 85, 19, 19, 185, 197, 185, \n64, 185, 85, 185, 85, 69, 85, 185, 85, 85, 197, 185, 210, 85, \n85, 185, 69, 85, 85, 163, 85, 197, 85, 69, 85, 85, 85, 69, 69, \n85, 85, 64, 85, 85, 85, 210, 85, 85, 69, 69, 85, 85, 85, 85, \n19, 85, 69, 69, 85, 85, 85, 85, 69, 69, 185, 85, 185, 85, 85, \n69, 69, 85, 19, 85, 85, 69, 85, 69, 85, 85, 69, 85, 69, 85, 69, \n85, 69, 69, 85, 85, 85, 69, 85, 69, 85, 85, 69, 19, 85, 69, 85, \n19, 69, 85, 85, 85, 85, 85, 85, 69, 85, 69, 85, 85, 85, 69, 85, \n85, 85, 85, 69, 69, 69, 85, 69, 69, 69, 85, 19, 85, 85, 85, 85, \n185, 185, 85, 185, 197, 64, 185, 185, 185, 85, 85, 64, 69, 69, \n69, 185, 64, 85, 69, 85, 85, 85, 69, 85, 185, 85, 185, 185, 85, \n185, 85, 85, 69, 69, 19, 69, 19, 85, 85, 197, 69, 69, 69, 85, \n85, 85, 85, 185, 69, 85, 85, 85, 85, 85, 69, 69, 85, 185, 85, \n185, 69, 185, 69, 85, 85, 85, 69, 69, 69, 85, 69, 69, 69, 69, \n69, 85, 185, 69, 85, 69, 85, 69, 85, 69, 85, 69, 85, 69, 69, \n85, 85, 85, 85, 85, 69, 69, 19, 85, 69, 85, 69, 19, 85, 69, 85, \n85, 69, 69, 85, 85, 85, 85, 69, 69, 85, 69, 69, 85, 69, 69, 69, \n69, 19, 85, 85, 69, 85, 85, 69, 69, 69, 69, 85, 85, 85, 69, 85, \n85, 69, 85, 69, 69, 69, 69, 85, 69, 19, 69, 85, 85, 69, 69, 69, \n69, 85, 85, 69, 185, 185, 185, 69, 69, 185, 185, 85, 185, 64, \n72, 185, 197, 197, 185, 185, 185, 185, 69, 185, 185, 185, 85, \n185, 185, 85, 185, 69, 85, 185, 85, 69, 185, 69, 85, 197, 85, \n85, 64, 69, 85, 85, 64, 85, 69, 85, 85, 69, 19, 19, 69, 85, 69, \n69, 85, 85, 185, 85, 85, 85, 85, 69, 85, 69, 85, 85, 69, 69, \n69, 69, 69, 85, 69, 85, 69, 185, 69, 85, 69, 85, 69, 69, 85, \n69, 85, 69, 69, 69, 85, 69, 85, 69, 69, 69, 19, 85, 85, 69, 85, \n69, 85, 69, 69, 85, 69, 69, 85, 85, 69, 85, 85, 69, 85, 85, 69, \n85, 19, 69, 69, 85, 85, 69, 69, 210, 69, 69, 85, 85, 69, 85, \n69, 69, 85, 69, 69, 85, 69, 185, 85, 85, 19, 85, 85, 85, 85, \n85, 69, 69, 85, 69, 85, 69, 85, 85, 69, 69, 69, 69, 85, 85, 69, \n69, 85, 69, 185, 69, 85, 69, 69, 85, 69, 85, 69, 85, 85, 85, \n85, 69, 69, 69, 85, 85, 69, 85, 85, 85, 69, 69, 69, 85, 69, 69, \n85, 85, 69, 69, 85, 85, 69, 85, 69, 85, 69, 69, 69, 85, 85, 69, \n69, 69, 69, 69, 69, 69, 69, 69, 85, 69, 69, 69, 69, 69, 19, 19, \n69, 85, 69, 85, 69, 69, 85, 85, 69, 85, 85, 85, 85, 85, 69, 69, \n69, 85, 85, 85, 69, 85, 85, 85, 69, 85, 85, 19, 85, 85, 69, 69, \n69, 69, 69, 69, 69, 85, 19, 85, 85, 85, 85, 69, 69, 69, 69, 69, \n69, 69, 69, 85, 69, 69, 69, 85, 85, 69, 85, 19, 85, 69, 69, 85, \n85, 69, 69, 69, 69, 69, 69, 69, 69, 69, 85, 69, 69, 69, 85, 85, \n69, 85, 69, 85, 85, 69, 85, 69, 69, 69, 69, 40, 185, 185, 197, \n64, 185, 185, 185, 185, 185, 85, 64, 69, 185, 69, 69, 185, 185, \n64, 185, 69, 69, 69, 185, 69, 185, 185, 185, 69, 69, 85, 85, \n69, 69, 185, 69, 85, 69, 85, 69, 69, 69, 64, 69, 85, 69, 85, \n69, 185, 69, 69, 197, 85, 69, 69, 85, 69, 69, 85, 19, 69, 69, \n69, 69, 69, 69, 69, 85, 85, 85, 19, 69, 69, 85, 69, 69, 69, 69, \n69, 85, 19, 85, 85, 85, 69, 69, 85, 85, 85, 69, 69, 85, 85, 69, \n85, 85, 85, 69, 69, 69, 85, 69, 69, 69, 85, 19, 69, 185, 69, \n69, 69, 69, 69, 69, 69, 85, 69, 19, 185, 85, 85, 69, 85, 69, \n19, 85, 85, 69, 69, 69, 69, 19, 69, 69, 85, 85, 69, 19, 69, 69, \n69, 85, 85, 69, 69, 69, 85, 69, 19, 19, 69, 69, 69, 69, 69, 85, \n85, 85, 19, 85, 69, 69, 85, 85, 85, 69, 85, 85, 85, 85, 69, 69, \n85, 69, 69, 69, 69, 69, 85, 69, 69, 85, 85, 69, 85, 85, 85, 69, \n69, 85, 69, 85, 85, 69, 69, 69, 69, 85, 85, 85, 85, 69, 69, 85, \n69, 69, 85, 85, 69, 69, 69, 69, 85, 85, 69, 69, 85, 69, 69, 85, \n19, 69, 85, 69, 69, 85, 69, 69, 69, 85, 69, 85, 19, 19, 19, 69, \n85, 69, 69, 69, 69, 85, 85, 69, 69, 69, 85, 69, 85, 69, 85, 69, \n19, 85, 69, 69, 85, 69, 19, 69, 85, 69, 85, 69, 69, 69, 69, 19\n), c(1165, 1165, 1165, 1170, 1170, 1245, 1185, 1105, 1185, 1185, \n1185, 1185, 1185, 1185, 1185, 1065, 1105, 1120, 1120, 1120, 1120, \n1120, 1120, 1120, 1120, 1100, 1100, 1100, 1100, 1100, 1100, 1100, \n1100, 1100, 1100, 1255, 1255, 1270, 1255, 1110, 1255, 1110, 1195, \n1165, 1075, 1110, 1130, 1130, 1130, 1110, 1130, 1110, 1275, 1110, \n1060, 1130, 1115, 1130, 1115, 1115, 1110, 1180, 1115, 1110, 1130, \n1100, 1100, 1100, 1260, 1260, 1100, 1120, 1260, 1100, 1120, 1100, \n1120, 1125, 1105, 1100, 1105, 1480, 1480, 1320, 1270, 1280, 1105, \n1255, 1275, 1115, 1130, 1130, 1130, 1075, 1135, 1075, 1110, 1110, \n1110, 1135, 1105, 1110, 1130, 1090, 1130, 1110, 1165, 1130, 1130, \n1150, 1110, 1130, 1110, 1115, 1130, 1085, 1105, 1115, 1130, 1180, \n1105, 1105, 1115, 1100, 1110, 1130, 1130, 1150, 1130, 1065, 1130, \n1110, 1110, 1115, 1115, 1130, 1075, 1110, 1130, 1100, 1075, 1110, \n1084, 1105, 1110, 1140, 1075, 1095, 1075, 1025, 1075, 1110, 1075, \n1060, 1121, 1140, 1205, 1075, 1075, 1105, 1025, 1075, 1075, 1615, \n1075, 1067, 1075, 1040, 1060, 1080, 1060, 1025, 1030, 1075, 1075, \n1110, 1110, 1075, 1055, 1165, 1075, 1075, 1050, 1030, 1085, 1075, \n1075, 1105, 1075, 1075, 1025, 1025, 1075, 1075, 1060, 1080, 1040, \n1040, 1105, 1075, 1105, 1075, 1060, 1040, 1025, 1060, 1085, 1075, \n1075, 1025, 1060, 1040, 1075, 1075, 1040, 1075, 1045, 1055, 1025, \n1060, 1025, 1025, 1075, 1080, 1060, 1025, 1075, 1040, 1075, 1075, \n1025, 1075, 1075, 1040, 1060, 1075, 1045, 1075, 1070, 1055, 1060, \n1075, 1090, 1040, 1075, 1040, 1075, 1060, 1060, 1045, 1080, 1060, \n1055, 1080, 1040, 1025, 1025, 1075, 1025, 1030, 1030, 1060, 1085, \n1080, 1060, 1075, 1060, 1110, 1105, 1080, 1140, 1119, 1110, 1095, \n1135, 1140, 1075, 1055, 1110, 1035, 1035, 1025, 1140, 1135, 1060, \n1025, 1075, 1080, 1080, 1035, 1055, 1140, 1080, 1115, 1115, 1055, \n1140, 1060, 1075, 1040, 1045, 1075, 1030, 1105, 1070, 1075, 1119, \n1040, 1030, 1035, 1080, 1055, 1060, 1080, 1105, 1025, 1075, 1075, \n1075, 1055, 1070, 1025, 1035, 1080, 1105, 1065, 1140, 1030, 1115, \n1025, 1090, 1090, 1060, 1025, 1040, 1025, 1075, 1035, 1050, 1035, \n1035, 1025, 1075, 1140, 1030, 1075, 1025, 1060, 1035, 1075, 1050, \n1080, 1025, 1080, 1040, 1025, 1075, 1060, 1075, 1060, 1080, 1025, \n1025, 1085, 1070, 1025, 1080, 1045, 1105, 1055, 1050, 1055, 1080, \n1025, 1030, 1075, 1055, 1080, 1060, 1035, 1035, 1055, 1030, 1025, \n1060, 1025, 1025, 1030, 1025, 1105, 1060, 1075, 1045, 1080, 1080, \n1025, 1025, 1025, 1025, 1065, 1080, 1070, 1025, 1055, 1075, 1050, \n1080, 1030, 1025, 1025, 1050, 1075, 1025, 1085, 1040, 1060, 1060, \n1025, 1025, 1030, 1025, 1065, 1070, 1025, 1100, 1140, 1100, 1015, \n1050, 1120, 1135, 1065, 1135, 1135, 1065, 1115, 1078, 1120, 1120, \n1135, 1135, 1135, 1050, 1135, 1135, 1135, 1085, 1115, 1135, 1090, \n1100, 1035, 1065, 1150, 1065, 1015, 1115, 1045, 1070, 1079, 1055, \n1075, 1260, 1040, 1070, 1065, 1135, 1065, 1050, 1075, 1075, 1035, \n1050, 1015, 1040, 1085, 1020, 1025, 1075, 1075, 1115, 1075, 1070, \n1075, 1085, 1020, 1075, 1000, 1065, 1075, 1015, 1000, 1050, 1050, \n1050, 1065, 1000, 1075, 1015, 1100, 1050, 1065, 1050, 1075, 1035, \n1025, 1085, 1050, 1070, 1050, 1015, 1015, 1065, 1050, 1065, 1050, \n1025, 1035, 1120, 1075, 1070, 1015, 1065, 1050, 1055, 1015, 1035, \n1065, 1040, 1015, 1075, 1085, 1035, 1065, 1055, 1015, 1070, 1070, \n1035, 1075, 1015, 1040, 1015, 1065, 1075, 1050, 1045, 1155, 1015, \n1015, 1100, 1075, 1050, 1055, 1015, 1015, 1070, 1035, 1020, 1075, \n1015, 1120, 1065, 1075, 1015, 1070, 1085, 1070, 1075, 1075, 1035, \n1050, 1065, 1050, 1070, 1015, 1075, 1075, 1015, 1050, 1015, 1015, \n1065, 1070, 1050, 1035, 1075, 1035, 1135, 1035, 1075, 1015, 1035, \n1065, 1025, 1070, 1050, 1075, 1065, 1075, 1065, 1035, 1045, 1010, \n1065, 1070, 1015, 1075, 1070, 1070, 1000, 1050, 1050, 1070, 1035, \n1020, 1075, 1075, 1050, 1020, 1070, 1085, 1015, 1075, 1015, 1065, \n1050, 1050, 1050, 1065, 1075, 1015, 1035, 1035, 1035, 1050, 1050, \n1040, 1050, 1015, 1075, 1050, 1015, 1050, 1030, 1050, 1035, 1075, \n1050, 1055, 1050, 1070, 1015, 1050, 1085, 1065, 1050, 1065, 1115, \n1075, 1065, 1065, 1050, 1035, 1015, 1080, 1070, 1105, 1015, 1075, \n1070, 1065, 1035, 1055, 1075, 1135, 1075, 1075, 1015, 1050, 1015, \n1050, 1015, 1000, 1015, 1070, 1480, 1070, 1075, 1065, 1055, 1040, \n1035, 1015, 1035, 1050, 1015, 1050, 1050, 1075, 1035, 1035, 1035, \n1070, 1075, 1015, 1075, 1114, 1070, 1045, 1050, 1070, 1070, 1050, \n1015, 1050, 1050, 1050, 1015, 1015, 1045, 1050, 1075, 1000, 1035, \n1050, 1085, 1070, 1000, 1075, 1015, 1055, 1085, 1035, 1075, 1050, \n1050, 1030, 1035, 1172, 1150, 1135, 1114, 1135, 1100, 1150, 1115, \n1100, 1115, 1075, 1135, 1015, 1115, 1015, 1050, 1140, 1150, 1135, \n1115, 1015, 1035, 1045, 1115, 1050, 1135, 1135, 1140, 1050, 1050, \n1070, 1070, 1035, 1050, 1135, 1050, 1075, 1050, 1070, 1015, 1040, \n1050, 1135, 1050, 1075, 1035, 1070, 1050, 1135, 1015, 1015, 1083, \n1085, 1015, 1035, 1070, 1050, 1050, 1070, 1015, 1015, 1015, 1050, \n1050, 1010, 1035, 1015, 1105, 1070, 1085, 1015, 1030, 1035, 1085, \n1050, 1050, 1050, 1035, 1035, 1085, 1065, 1070, 1085, 1085, 1015, \n1015, 1085, 1085, 1070, 1035, 1050, 1085, 1070, 1035, 1075, 1075, \n1105, 1035, 1020, 1015, 1070, 1035, 1045, 1015, 1055, 1114, 1050, \n1115, 1015, 1050, 1035, 1035, 1035, 1015, 1015, 1055, 1040, 1050, \n1135, 1070, 1055, 1050, 1070, 1035, 1065, 1070, 1070, 1015, 1045, \n1050, 1015, 1015, 1050, 1035, 1075, 1070, 1050, 1065, 1015, 1035, \n1015, 1075, 1055, 1015, 1015, 1050, 1070, 1035, 1050, 1114, 1050, \n1035, 1035, 1000, 1000, 1075, 1070, 1085, 1015, 1075, 1050, 1015, \n1070, 1070, 1075, 1050, 1075, 1070, 1100, 1070, 1035, 1015, 1070, \n1015, 1050, 1050, 1050, 1050, 1070, 1010, 1035, 1085, 1075, 1035, \n1085, 1075, 1055, 1015, 1015, 1055, 1015, 1085, 1055, 1035, 1035, \n1050, 1035, 1075, 1065, 1070, 1070, 1035, 1035, 1080, 1035, 1035, \n1060, 1075, 1050, 1050, 1050, 1050, 1055, 1085, 1050, 1035, 1080, \n1050, 1030, 1070, 1050, 1015, 1075, 1050, 1050, 1070, 1025, 1000, \n1050, 1075, 1050, 1070, 1075, 1114, 1075, 1050, 1065, 1000, 1035, \n1035, 1015, 1070, 1075, 1040, 1010, 1050, 1075, 1050, 1070, 1050, \n1100, 1050, 1114, 1080, 1015, 1050, 1075, 1050, 1015, 1015, 1080, \n1045, 1065, 1015, 1025, 1015, 1015, 1114), c(0, 1, 1, 1, 0, 1, \n0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, \n1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, \n1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, \n0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \n1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, \n1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, \n1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, \n0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, \n0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, \n0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, \n0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, \n0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, \n1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, \n1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, \n1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, \n0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, \n0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, \n1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, \n1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, \n0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, \n0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, \n1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0), c(1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, \n0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, \n0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, \n1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0), c(3, 3, 3, 3, 3, 3, \n3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, \n3, 3, 3, 3, 3, 20, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 24, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 28, 3, 3, \n3, 3, 3, 36, 24, 3, 3, 3, 3, 3, 24, 3, 3, 36, 36, 3, 3, 3, 3, \n3, 3, 6, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 12, \n3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 12, 6, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 6, 3, 6, 3, 3, 3, 3, \n3, 3, 3, 6, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 6, 3, 3, 6, 12, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 12, 3, 3, 3, 12, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n6, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, \n3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 6, 3, 3, 3, 3, \n3, 3, 3, 12, 6, 3, 3, 12, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 12, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, \n3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 12, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n12, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 12, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 6, 3, \n6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, \n3, 3, 12, 6, 6, 3, 3, 12, 3, 3, 6, 3, 3, 3, 6, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, \n6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, \n3, 3, 3, 3, 3, 3, 3, 6, 3, 6, 6, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, \n3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 6, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 12, 6, 3, 12, 3, 6, 3, 3, 3, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 3, 12, 3, 3, 3, 6, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, \n6, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 6, 3, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 6, \n3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 6, 12, 3, \n12, 3, 3, 3, 3, 3), c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, \n1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, \n0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, \n0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, \n1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, \n1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, \n1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, \n0, 0, 1, 1, 0, 0, 0), c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1), c(1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, \n1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, \n1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, \n1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, \n0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, \n1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, \n0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, \n1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 1, 1, 0, 0), c(1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, \n1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, \n1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, \n1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, \n0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, \n0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, \n1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, \n1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, \n1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, \n0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, \n1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, \n0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, \n0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, \n0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, \n1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, \n1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, \n0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, \n0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, \n0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, \n1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, \n0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, \n0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, \n0, 0, 0, 1, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, \n1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, \n1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, \n1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, \n1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, \n0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, \n0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, \n0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, \n0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, \n0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, \n0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, \n0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, \n0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, \n1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, \n0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, \n1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, \n1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, \n0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, \n0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, \n1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, \n1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, \n0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, \n1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, \n0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, \n0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, \n1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, \n1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, \n0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, \n1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, \n0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, \n0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, \n1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, \n0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, \n0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, \n0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, \n1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, \n0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, \n1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, \n0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, \n1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, \n1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, \n0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, \n1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0), c(0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, \n1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, \n1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, \n0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, \n1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, \n0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, \n0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, \n1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, \n1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, \n1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, \n0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, \n0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, \n1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, \n0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, \n0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, \n1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, \n0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, \n0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, \n1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, \n0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, \n1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, \n1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, \n0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, \n1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, \n1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0), c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1), c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, \n1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, \n0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, \n1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, \n1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, \n0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, \n0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, \n1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, \n0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, \n0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, \n1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, \n0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, \n0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, \n1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, \n0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, \n0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, \n1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, \n0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, \n1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, \n1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, \n1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0), c(1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, \n0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, \n0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, \n0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, \n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, \n0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, \n0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, \n1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, \n1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, \n1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, \n1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, \n1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, \n1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, \n1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, \n0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, \n0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, \n1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, \n1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, \n1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, \n1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, \n1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, \n0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, \n1, 0, 1, 1, 1, 1, 0), c(0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, \n1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, \n0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, \n0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, \n0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, \n0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, \n1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, \n1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \n0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, \n0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, \n0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0), c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, \n1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, \n1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, \n1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, \n0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \n1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, \n0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, \n1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, \n1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, \n1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, \n0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, \n0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, \n1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \n0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, \n1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, \n0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, \n0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, \n1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, \n0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, \n0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, \n1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, \n1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, \n1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, \n1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, \n1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \n0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, \n0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, \n0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n0, 1, 0, 0, 0, 0, 0), c(9.52879410309472, 9.54323478724951, 9.61246657881883, \n9.52879410309472, 9.46885106712768, 9.83091685970129, 9.97580821411575, \n9.46885106712768, 9.94989392535028, 9.90098442231801, 9.88328484521861, \n9.97580821411575, 10.0212705881925, 9.99879773234045, 10.0323204243791, \n9.72615353725321, 9.67721410821299, 9.67721410821299, 9.7380231128086, \n9.69584818775788, 9.67721410821299, 9.76967040480179, 9.66459564425378, \n9.7380231128086, 9.79534539391642, 9.66459564425378, 9.67721410821299, \n9.61246657881883, 9.64859530290734, 9.66459564425378, 9.67721410821299, \n9.66459564425378, 9.59899836176797, 9.72615353725321, 9.54323478724951, \n9.7380231128086, 9.7380231128086, 9.85219425814858, 9.79534539391642, \n9.66776521901506, 9.79534539391642, 9.66459564425378, 9.99652241850332, \n9.64859530290734, 9.49175283141437, 9.63233478203556, 9.68028149926871, \n9.71111565988867, 9.83894903139856, 9.79534539391642, 9.84955921051057, \n9.61246657881883, 10.0100972875944, 9.67721410821299, 9.47231994707559, \n9.90098442231801, 9.7380231128086, 9.83894903139856, 9.82281964946867, \n9.73477299914839, 9.60911649193355, 9.84955921051057, 9.75556742245951, \n9.64536428232589, 9.76709492763057, 9.60911649193355, 9.67721410821299, \n9.70808075619352, 10.0100972875944, 9.90098442231801, 9.67721410821299, \n9.84691720104773, 9.90098442231801, 9.67721410821299, 9.83894903139856, \n9.76709492763057, 9.85166780380633, 9.82552601106642, 9.82552601106642, \n9.76709492763057, 9.79534539391642, 10.3889953683178, 10.3417424834673, \n10.1246291011797, 10.0410732154887, 10.126231023829, 9.79255599182885, \n9.86526633971593, 10.0100972875944, 9.7019831763254, 9.84955921051057, \n9.7380231128086, 9.98736903651683, 9.67721410821299, 9.79534539391642, \n9.67092477930543, 9.69584818775788, 9.71111565988867, 9.71111565988867, \n9.82281964946867, 9.69584818775788, 9.70808075619352, 9.90098442231801, \n9.82552601106642, 9.84955921051057, 9.70808075619352, 9.9281801651265, \n10.1064283965328, 9.87560234904659, 9.94989392535028, 9.75266466280154, \n9.90098442231801, 9.82281964946867, 9.87816974455184, 9.98736903651683, \n9.73317361486645, 9.87816974455184, 9.84691720104773, 9.89090877032927, \n9.89090877032927, 9.84955921051057, 9.94030152565884, 9.88328484521861, \n9.87816974455184, 9.77849106236144, 9.90098442231801, 9.90098442231801, \n9.94989392535028, 9.9281801651265, 9.78667279794429, 10.0753378094628, \n9.87816974455184, 9.84955921051057, 9.84955921051057, 9.90098442231801, \n10.0212705881925, 9.82552601106642, 9.83627880284268, 9.97580821411575, \n9.78667279794429, 9.81164634887055, 8.84649693855884, 8.95544812234739, \n9.38848655735966, 8.46589989702869, 9.49175283141437, 9.38848655735966, \n9.38429367909962, 9.34966743719728, 9.32812340763257, 9.25913053614561, \n9.25435725739296, 9.43348392329039, 9.30109473524465, 9.38848655735966, \n9.49175283141437, 9.59899836176797, 9.34574500898239, 9.30109473524465, \n9.51044496442652, 9.30109473524465, 9.46885106712768, 9.38848655735966, \n9.42947590189285, 9.38848655735966, 9.61246657881883, 9.46885106712768, \n9.38848655735966, 9.36648905446611, 9.42947590189285, 9.45328655058657, \n9.38639231575654, 9.38848655735966, 9.36306145899385, 9.30109473524465, \n9.54323478724951, 9.54323478724951, 9.30109473524465, 9.42947590189285, \n9.51044496442652, 9.36648905446611, 9.51044496442652, 9.38848655735966, \n9.46498259034976, 9.51044496442652, 9.37160851957231, 9.37160851957231, \n9.61246657881883, 9.20432229965062, 9.51044496442652, 9.37160851957231, \n9.38848655735966, 9.43308384326905, 9.45328655058657, 9.39266192877014, \n9.43308384326905, 9.42947590189285, 9.30109473524465, 9.51044496442652, \n9.46885106712768, 9.51044496442652, 9.51044496442652, 9.50673438502998, \n9.34966743719728, 9.45328655058657, 9.46885106712768, 9.46109909032337, \n9.38848655735966, 9.36734412078585, 9.20532783015264, 9.38387342273706, \n9.43348392329039, 9.53784393861464, 9.41694795465029, 9.30109473524465, \n9.54645540194955, 9.43348392329039, 9.54323478724951, 9.35010231435134, \n9.38387342273706, 9.20532783015264, 9.34574500898239, 9.42947590189285, \n9.46885106712768, 9.36306145899385, 9.20029003612268, 9.28266103355581, \n9.32812340763257, 9.46885106712768, 9.38848655735966, 9.30109473524465, \n9.30565055178051, 9.38848655735966, 9.37160851957231, 9.42545175159313, \n9.46498259034976, 9.40919123072135, 9.38429367909962, 9.38848655735966, \n9.61246657881883, 9.38848655735966, 9.46885106712768, 9.61246657881883, \n9.50673438502998, 9.52879410309472, 9.46885106712768, 9.45328655058657, \n9.38387342273706, 9.43348392329039, 9.61246657881883, 9.52879410309472, \n9.44896349413878, 9.61513859109664, 9.45328655058657, 9.46885106712768, \n9.35010231435134, 9.38848655735966, 9.50673438502998, 9.30109473524465, \n9.34574500898239, 9.23503298456655, 9.38848655735966, 9.49175283141437, \n9.46885106712768, 9.37160851957231, 9.35010231435134, 9.51044496442652, \n8.77955745588373, 8.85366542803745, 9.20029003612268, 9.23503298456655, \n9.13237883050647, 8.95544812234739, 9.15377002048779, 8.95544812234739, \n9.01796847932873, 9.20532783015264, 9.20532783015264, 9.20532783015264, \n9.25913053614561, 9.28266103355581, 9.0994088112689, 9.25913053614561, \n8.54675199365778, 9.30109473524465, 9.15377002048779, 9.20532783015264, \n9.38429367909962, 9.38848655735966, 8.97461803845511, 9.30109473524465, \n9.0994088112689, 9.38848655735966, 9.20532783015264, 9.0994088112689, \n9.25913053614561, 9.13237883050647, 9.35010231435134, 9.18502256399189, \n9.20532783015264, 9.34574500898239, 9.43348392329039, 9.30109473524465, \n9.30109473524465, 9.33167265714371, 9.29605924737872, 9.35010231435134, \n9.23503298456655, 9.43348392329039, 9.34574500898239, 9.38848655735966, \n9.37160851957231, 9.30109473524465, 9.38848655735966, 9.30519590298886, \n9.34574500898239, 9.09380655572023, 9.25913053614561, 9.37160851957231, \n9.39266192877014, 9.38848655735966, 9.19522673416613, 9.30109473524465, \n9.30109473524465, 9.07050342678838, 9.28266103355581, 9.07680897935166, \n9.07680897935166, 9.34574500898239, 9.20532783015264, 9.38848655735966, \n9.32812340763257, 9.29651806821724, 9.18502256399189, 9.25435725739296, \n9.0994088112689, 9.23503298456655, 9.20331575703922, 9.25913053614561, \n9.38848655735966, 9.35010231435134, 9.15904707758863, 9.28266103355581, \n9.0994088112689, 9.30109473524465, 9.28266103355581, 9.19003561863582, \n9.37160851957231, 9.38848655735966, 9.37160851957231, 9.30109473524465, \n9.32812340763257, 9.20532783015264, 9.17988116449147, 9.20029003612268, \n9.15641202995063, 9.35010231435134, 9.35010231435134, 9.25913053614561, \n9.36734412078585, 9.38429367909962, 9.30109473524465, 9.25913053614561, \n9.28266103355581, 9.38848655735966, 9.21034037197618, 9.34574500898239, \n9.38848655735966, 9.84955921051057, 9.34574500898239, 9.23503298456655, \n9.25913053614561, 9.52879410309472, 9.20532783015264, 9.23503298456655, \n9.38387342273706, 9.46885106712768, 9.38848655735966, 9.16429643347478, \n9.30109473524465, 9.37160851957231, 9.42947590189285, 9.25913053614561, \n9.29651806821724, 9.30109473524465, 9.20532783015264, 9.28266103355581, \n9.43348392329039, 9.28266103355581, 9.46885106712768, 9.30519590298886, \n9.38848655735966, 9.52879410309472, 9.30565055178051, 9.51044496442652, \n9.28266103355581, 9.0994088112689, 9.18502256399189, 9.29651806821724, \n9.28266103355581, 9.47270463644367, 9.46885106712768, 9.30109473524465, \n9.36819845659176, 9.41328121597287, 9.35010231435134, 9.38429367909962, \n9.38681151509196, 9.25913053614561, 9.0994088112689, 9.25913053614561, \n9.46885106712768, 9.20532783015264, 9.20532783015264, 9.30109473524465, \n9.30109473524465, 9.30109473524465, 9.28730141311231, 9.25913053614561, \n9.25435725739296, 9.25435725739296, 9.46885106712768, 9.32812340763257, \n9.0994088112689, 8.84649693855884, 8.9226582995244, 8.65712903171375, \n8.84649693855884, 8.98092720764838, 8.95544812234739, 8.98092720764838, \n9.01796847932873, 9.15904707758863, 8.83927669058535, 9.04192172035122, \n8.83927669058535, 9.0994088112689, 8.98092720764838, 9.0994088112689, \n9.0994088112689, 9.0994088112689, 8.98092720764838, 8.95544812234739, \n8.9226582995244, 9.0994088112689, 9.19013766465866, 9.15377002048779, \n9.07680897935166, 9.25913053614561, 9.25435725739296, 9.20532783015264, \n8.98092720764838, 9.30109473524465, 9.20532783015264, 9.0595174822416, \n8.88875674784872, 8.84649693855884, 8.98719682066197, 9.20532783015264, \n9.15377002048779, 8.98092720764838, 9.20532783015264, 8.84649693855884, \n9.01796847932873, 9.20532783015264, 9.25913053614561, 8.98092720764838, \n9.18502256399189, 9.15904707758863, 9.20532783015264, 9.15904707758863, \n9.20532783015264, 9.18502256399189, 8.69114649853968, 9.04782144247841, \n9.04723303410603, 9.13237883050647, 9.0994088112689, 9.15904707758863, \n9.07680897935166, 9.01796847932873, 9.0994088112689, 9.0994088112689, \n9.0994088112689, 9.15377002048779, 9.0994088112689, 9.13237883050647, \n9.07680897935166, 9.20532783015264, 9.20532783015264, 9.20029003612268, \n9.0994088112689, 9.0994088112689, 9.0994088112689, 8.98707181284882, \n9.20029003612268, 9.01796847932873, 9.25913053614561, 9.04192172035122, \n9.04782144247841, 9.15904707758863, 9.15377002048779, 9.01796847932873, \n9.15904707758863, 9.07680897935166, 9.18502256399189, 9.20532783015264, \n9.04782144247841, 9.04192172035122, 9.07680897935166, 8.98092720764838, \n9.00577320623491, 9.30519590298886, 9.09380655572023, 9.35010231435134, \n9.25435725739296, 9.25913053614561, 9.13237883050647, 9.30109473524465, \n9.25435725739296, 9.07680897935166, 9.07680897935166, 9.25435725739296, \n9.18502256399189, 9.0994088112689, 8.9159693113736, 9.04192172035122, \n9.30109473524465, 9.0994088112689, 9.07680897935166, 9.25435725739296, \n9.30109473524465, 9.04192172035122, 9.20532783015264, 9.20532783015264, \n9.07680897935166, 9.20532783015264, 9.15904707758863, 9.01796847932873, \n9.30109473524465, 9.01796847932873, 9.19978485803667, 9.11932097358901, \n9.30109473524465, 9.25913053614561, 9.09380655572023, 9.15904707758863, \n9.30109473524465, 8.98092720764838, 8.98092720764838, 9.15904707758863, \n9.30109473524465, 9.18502256399189, 9.15377002048779, 9.0994088112689, \n9.0994088112689, 9.09380655572023, 9.20532783015264, 9.07680897935166, \n9.0994088112689, 9.0994088112689, 9.0994088112689, 9.20532783015264, \n9.20029003612268, 9.0994088112689, 9.0994088112689, 9.15904707758863, \n8.95544812234739, 9.0994088112689, 9.0994088112689, 9.38848655735966, \n9.10442414638463, 9.2098402469345, 9.13237883050647, 9.30109473524465, \n9.09380655572023, 9.15904707758863, 9.20532783015264, 8.98092720764838, \n9.01796847932873, 9.15377002048779, 8.98092720764838, 9.15904707758863, \n9.30109473524465, 9.0994088112689, 9.15377002048779, 9.20029003612268, \n9.0994088112689, 9.29651806821724, 9.04192172035122, 9.15904707758863, \n8.84649693855884, 9.18502256399189, 9.17471319433303, 9.13237883050647, \n9.0994088112689, 9.20029003612268, 9.25913053614561, 9.18502256399189, \n9.30109473524465, 9.20532783015264, 9.25913053614561, 9.24956108512946, \n9.0825070004663, 9.25913053614561, 9.13237883050647, 8.96187901267768, \n9.30109473524465, 9.20532783015264, 9.20532783015264, 8.99961934066053, \n9.13237883050647, 8.96187901267768, 9.10497985631836, 9.0994088112689, \n9.0994088112689, 9.20532783015264, 8.98657162526805, 9.07680897935166, \n9.18502256399189, 9.30109473524465, 9.18502256399189, 9.01188943325234, \n9.0994088112689, 9.15904707758863, 9.18502256399189, 9.25435725739296, \n9.19522673416613, 9.23941361946189, 9.18502256399189, 9.20029003612268, \n9.04782144247841, 9.20532783015264, 9.18962733037864, 9.07680897935166, \n9.01796847932873, 9.25913053614561, 9.18502256399189, 9.09380655572023, \n8.98092720764838, 9.35010231435134, 9.15377002048779, 8.98657162526805, \n9.0994088112689, 9.01796847932873, 9.0994088112689, 9.20532783015264, \n9.18502256399189, 9.20532783015264, 9.18502256399189, 9.0994088112689, \n9.01796847932873, 8.95544812234739, 9.0994088112689, 9.15377002048779, \n9.46885106712768, 9.20532783015264, 9.25865423225473, 9.25913053614561, \n9.0994088112689, 9.2098402469345, 9.20532783015264, 9.20532783015264, \n9.20532783015264, 9.0994088112689, 9.30109473524465, 9.20532783015264, \n9.24474179869351, 9.0994088112689, 9.30109473524465, 9.0994088112689, \n9.23503298456655, 9.15377002048779, 9.13237883050647, 9.25913053614561, \n9.23503298456655, 9.23503298456655, 9.35010231435134, 8.95544812234739, \n9.15904707758863, 9.04192172035122, 9.0994088112689, 9.13237883050647, \n9.0994088112689, 9.0994088112689, 9.09324460009994, 9.14740057220231, \n9.07680897935166, 9.18502256399189, 9.30109473524465, 9.20532783015264, \n9.25913053614561, 9.25865423225473, 9.0994088112689, 9.09380655572023, \n9.0762373874527, 9.07680897935166, 9.28266103355581, 9.18502256399189, \n9.08817273800197, 8.98092720764838, 9.15377002048779, 9.01796847932873, \n9.25865423225473, 9.17936556767675, 8.95544812234739, 9.20532783015264, \n9.20532783015264, 9.20029003612268, 9.0994088112689, 9.01796847932873, \n9.07680897935166, 9.18502256399189, 9.30109473524465, 9.18502256399189, \n9.09380655572023, 9.20532783015264, 9.20532783015264, 9.01796847932873, \n9.13237883050647, 9.29651806821724, 9.18502256399189, 9.38848655735966, \n8.97461803845511, 9.29651806821724, 9.25435725739296, 9.30109473524465, \n9.20029003612268, 9.15377002048779, 9.30109473524465, 9.21034037197618, \n9.25913053614561, 9.43348392329039, 9.0994088112689, 9.25913053614561, \n9.13183814382123, 9.29651806821724, 9.30109473524465, 9.15377002048779, \n8.68270762989381, 8.84649693855884, 8.69951474821019, 8.56598335558567, \n8.38935981990635, 8.81729778386658, 8.84649693855884, 8.6569551337914, \n9.07680897935166, 8.77955745588373, 8.69114649853968, 9.25913053614561, \n8.66561319653451, 8.84649693855884, 8.7872203286293, 8.98092720764838, \n8.9159693113736, 8.95544812234739, 8.97461803845511, 8.83927669058535, \n8.63052187672324, 8.69114649853968, 8.84649693855884, 8.98092720764838, \n9.0994088112689, 8.98092720764838, 9.15904707758863, 8.98092720764838, \n8.84649693855884, 8.88875674784872, 8.88875674784872, 9.13237883050647, \n8.56598335558567, 8.97461803845511, 8.88875674784872, 9.04192172035122, \n8.98092720764838, 8.98092720764838, 8.8023721336499, 8.98092720764838, \n8.88875674784872, 8.9159693113736, 9.0994088112689, 8.95544812234739, \n8.95544812234739, 8.6569551337914, 8.83927669058535, 8.77955745588373, \n9.0994088112689, 8.90245559220688, 8.95544812234739, 8.91731069319781, \n9.13237883050647, 8.77955745588373, 8.8246778911642, 8.9226582995244, \n8.95544812234739, 9.20532783015264, 8.80086724247048, 9.07680897935166, \n8.69114649853968, 8.81729778386658, 8.77955745588373, 8.98092720764838, \n8.81729778386658, 8.98092720764838, 8.98092720764838, 9.0994088112689, \n8.77183540978982, 9.04192172035122, 8.81729778386658, 8.99342737041261, \n8.95544812234739, 9.04782144247841, 8.96123778149188, 8.77801780969814, \n8.98092720764838, 8.76795190976342, 9.0994088112689, 9.07680897935166, \n8.98092720764838, 9.09380655572023, 9.0994088112689, 9.09380655572023, \n8.7787879291047, 8.88875674784872, 9.13237883050647, 8.85223583522786, \n8.95544812234739, 8.84649693855884, 8.88875674784872, 9.20532783015264, \n9.13237883050647, 8.88183630500415, 9.01796847932873, 9.01796847932873, \n9.20029003612268, 8.89562962713648, 9.0994088112689, 8.77955745588373, \n8.98092720764838, 8.98092720764838, 8.98092720764838, 8.81729778386658, \n9.04192172035122, 8.9226582995244, 9.0994088112689, 8.84649693855884, \n8.81729778386658, 8.9226582995244, 8.9159693113736, 8.98092720764838, \n8.88875674784872, 8.98092720764838, 9.01796847932873, 8.81729778386658, \n9.07680897935166, 9.0994088112689, 9.04782144247841, 9.01796847932873, \n8.97461803845511, 9.04782144247841, 9.01796847932873, 9.0994088112689, \n8.88875674784872, 9.0994088112689, 8.81729778386658, 8.98092720764838, \n9.0994088112689, 8.98092720764838, 8.9159693113736, 8.69114649853968, \n8.95544812234739, 9.07680897935166, 9.0994088112689, 8.9219914105367, \n8.84649693855884, 8.88875674784872, 8.83927669058535, 8.88875674784872, \n9.0994088112689, 8.98092720764838, 8.98092720764838, 9.04782144247841, \n8.92132407651127, 9.01796847932873, 9.13237883050647, 8.98092720764838, \n9.15904707758863, 9.0994088112689, 9.04192172035122, 9.07680897935166, \n8.69114649853968, 9.0994088112689, 9.07680897935166, 8.93590352627442, \n8.87416809036397, 9.04192172035122, 8.69114649853968, 9.10497985631836, \n8.90923527919226, 8.9226582995244, 8.90923527919226, 8.9226582995244, \n9.0994088112689, 8.98092720764838, 8.98092720764838, 8.98092720764838, \n9.0994088112689, 8.95544812234739, 9.01796847932873, 8.95544812234739, \n8.84649693855884, 8.69114649853968, 8.9226582995244, 8.98092720764838, \n8.9159693113736, 8.9226582995244, 9.20532783015264, 8.98092720764838, \n9.13237883050647, 9.20532783015264, 8.98657162526805, 9.01796847932873, \n9.04782144247841, 9.04782144247841, 8.88875674784872, 8.81729778386658, \n9.0994088112689, 8.83927669058535, 8.84649693855884, 9.21034037197618, \n9.0994088112689, 9.04782144247841, 9.07680897935166, 8.92252495730139, \n9.10497985631836, 8.84649693855884, 9.04192172035122, 9.0994088112689, \n9.01796847932873, 8.98092720764838, 8.9159693113736, 9.10497985631836, \n8.87486763568805, 8.95544812234739, 8.67334187390617, 9.04782144247841, \n9.15377002048779, 8.81729778386658, 9.03598698483141, 8.97461803845511, \n8.98092720764838, 9.07680897935166, 9.20029003612268, 8.7787879291047, \n9.01796847932873, 8.83927669058535, 8.98092720764838, 9.01796847932873, \n9.18502256399189, 9.01796847932873, 9.09380655572023, 9.0994088112689, \n8.81729778386658, 8.98092720764838, 9.0595174822416, 8.95544812234739, \n8.96187901267768, 9.20532783015264, 8.69114649853968, 9.30109473524465, \n9.15377002048779, 8.9159693113736, 9.07680897935166, 9.07680897935166, \n9.04782144247841, 9.0994088112689, 8.88875674784872, 8.9159693113736, \n8.9226582995244, 8.9159693113736, 9.0994088112689, 9.25913053614561, \n8.85366542803745, 9.0994088112689, 9.01796847932873, 9.13237883050647, \n8.98092720764838, 9.20532783015264, 9.07680897935166, 8.84649693855884, \n9.0994088112689, 9.07680897935166, 8.95544812234739, 9.04192172035122, \n9.00577320623491, 8.93590352627442, 8.98092720764838, 8.95544812234739, \n9.20532783015264, 9.0994088112689, 9.0994088112689, 9.04192172035122, \n8.9226582995244, 9.04782144247841, 8.88875674784872, 8.84649693855884\n), c(13750, 13950, 14950, 13750, 12950, 18600, 21500, 12950, \n20950, 19950, 19600, 21500, 22500, 22000, 22750, 16750, 15950, \n15950, 16950, 16250, 15950, 17495, 15750, 16950, 17950, 15750, \n15950, 14950, 15500, 15750, 15950, 15750, 14750, 16750, 13950, \n16950, 16950, 19000, 17950, 15800, 17950, 15750, 21950, 15500, \n13250, 15250, 15999, 16500, 18750, 17950, 18950, 14950, 22250, \n15950, 12995, 19950, 16950, 18750, 18450, 16895, 14900, 18950, \n17250, 15450, 17450, 14900, 15950, 16450, 22250, 19950, 15950, \n18900, 19950, 15950, 18750, 17450, 18990, 18500, 18500, 17450, \n17950, 32500, 31000, 24950, 22950, 24990, 17900, 19250, 22250, \n16350, 18950, 16950, 21750, 15950, 17950, 15850, 16250, 16500, \n16500, 18450, 16250, 16450, 19950, 18500, 18950, 16450, 20500, \n24500, 19450, 20950, 17200, 19950, 18450, 19500, 21750, 16868, \n19500, 18900, 19750, 19750, 18950, 20750, 19600, 19500, 17650, \n19950, 19950, 20950, 20500, 17795, 23750, 19500, 18950, 18950, \n19950, 22500, 18500, 18700, 21500, 17795, 18245, 6950, 7750, \n11950, 4750, 13250, 11950, 11900, 11495, 11250, 10500, 10450, \n12500, 10950, 11950, 13250, 14750, 11450, 10950, 13500, 10950, \n12950, 11950, 12450, 11950, 14950, 12950, 11950, 11690, 12450, \n12750, 11925, 11950, 11650, 10950, 13950, 13950, 10950, 12450, \n13500, 11690, 13500, 11950, 12900, 13500, 11750, 11750, 14950, \n9940, 13500, 11750, 11950, 12495, 12750, 12000, 12495, 12450, \n10950, 13500, 12950, 13500, 13500, 13450, 11495, 12750, 12950, \n12850, 11950, 11700, 9950, 11895, 12500, 13875, 12295, 10950, \n13995, 12500, 13950, 11500, 11895, 9950, 11450, 12450, 12950, \n11650, 9900, 10750, 11250, 12950, 11950, 10950, 11000, 11950, \n11750, 12400, 12900, 12200, 11900, 11950, 14950, 11950, 12950, \n14950, 13450, 13750, 12950, 12750, 11895, 12500, 14950, 13750, \n12695, 14990, 12750, 12950, 11500, 11950, 13450, 10950, 11450, \n10250, 11950, 13250, 12950, 11750, 11500, 13500, 6500, 7000, \n9900, 10250, 9250, 7750, 9450, 7750, 8250, 9950, 9950, 9950, \n10500, 10750, 8950, 10500, 5150, 10950, 9450, 9950, 11900, 11950, \n7900, 10950, 8950, 11950, 9950, 8950, 10500, 9250, 11500, 9750, \n9950, 11450, 12500, 10950, 10950, 11290, 10895, 11500, 10250, \n12500, 11450, 11950, 11750, 10950, 11950, 10995, 11450, 8900, \n10500, 11750, 12000, 11950, 9850, 10950, 10950, 8695, 10750, \n8750, 8750, 11450, 9950, 11950, 11250, 10900, 9750, 10450, 8950, \n10250, 9930, 10500, 11950, 11500, 9500, 10750, 8950, 10950, 10750, \n9799, 11750, 11950, 11750, 10950, 11250, 9950, 9700, 9900, 9475, \n11500, 11500, 10500, 11700, 11900, 10950, 10500, 10750, 11950, \n10000, 11450, 11950, 18950, 11450, 10250, 10500, 13750, 9950, \n10250, 11895, 12950, 11950, 9550, 10950, 11750, 12450, 10500, \n10900, 10950, 9950, 10750, 12500, 10750, 12950, 10995, 11950, \n13750, 11000, 13500, 10750, 8950, 9750, 10900, 10750, 13000, \n12950, 10950, 11710, 12250, 11500, 11900, 11930, 10500, 8950, \n10500, 12950, 9950, 9950, 10950, 10950, 10950, 10800, 10500, \n10450, 10450, 12950, 11250, 8950, 6950, 7500, 5751, 6950, 7950, \n7750, 7950, 8250, 9500, 6900, 8450, 6900, 8950, 7950, 8950, 8950, \n8950, 7950, 7750, 7500, 8950, 9800, 9450, 8750, 10500, 10450, \n9950, 7950, 10950, 9950, 8600, 7250, 6950, 8000, 9950, 9450, \n7950, 9950, 6950, 8250, 9950, 10500, 7950, 9750, 9500, 9950, \n9500, 9950, 9750, 5950, 8500, 8495, 9250, 8950, 9500, 8750, 8250, \n8950, 8950, 8950, 9450, 8950, 9250, 8750, 9950, 9950, 9900, 8950, \n8950, 8950, 7999, 9900, 8250, 10500, 8450, 8500, 9500, 9450, \n8250, 9500, 8750, 9750, 9950, 8500, 8450, 8750, 7950, 8150, 10995, \n8900, 11500, 10450, 10500, 9250, 10950, 10450, 8750, 8750, 10450, \n9750, 8950, 7450, 8450, 10950, 8950, 8750, 10450, 10950, 8450, \n9950, 9950, 8750, 9950, 9500, 8250, 10950, 8250, 9895, 9130, \n10950, 10500, 8900, 9500, 10950, 7950, 7950, 9500, 10950, 9750, \n9450, 8950, 8950, 8900, 9950, 8750, 8950, 8950, 8950, 9950, 9900, \n8950, 8950, 9500, 7750, 8950, 8950, 11950, 8995, 9995, 9250, \n10950, 8900, 9500, 9950, 7950, 8250, 9450, 7950, 9500, 10950, \n8950, 9450, 9900, 8950, 10900, 8450, 9500, 6950, 9750, 9650, \n9250, 8950, 9900, 10500, 9750, 10950, 9950, 10500, 10400, 8800, \n10500, 9250, 7800, 10950, 9950, 9950, 8100, 9250, 7800, 9000, \n8950, 8950, 9950, 7995, 8750, 9750, 10950, 9750, 8200, 8950, \n9500, 9750, 10450, 9850, 10295, 9750, 9900, 8500, 9950, 9795, \n8750, 8250, 10500, 9750, 8900, 7950, 11500, 9450, 7995, 8950, \n8250, 8950, 9950, 9750, 9950, 9750, 8950, 8250, 7750, 8950, 9450, \n12950, 9950, 10495, 10500, 8950, 9995, 9950, 9950, 9950, 8950, \n10950, 9950, 10350, 8950, 10950, 8950, 10250, 9450, 9250, 10500, \n10250, 10250, 11500, 7750, 9500, 8450, 8950, 9250, 8950, 8950, \n8895, 9390, 8750, 9750, 10950, 9950, 10500, 10495, 8950, 8900, \n8745, 8750, 10750, 9750, 8850, 7950, 9450, 8250, 10495, 9695, \n7750, 9950, 9950, 9900, 8950, 8250, 8750, 9750, 10950, 9750, \n8900, 9950, 9950, 8250, 9250, 10900, 9750, 11950, 7900, 10900, \n10450, 10950, 9900, 9450, 10950, 10000, 10500, 12500, 8950, 10500, \n9245, 10900, 10950, 9450, 5900, 6950, 6000, 5250, 4400, 6750, \n6950, 5750, 8750, 6500, 5950, 10500, 5800, 6950, 6550, 7950, \n7450, 7750, 7900, 6900, 5600, 5950, 6950, 7950, 8950, 7950, 9500, \n7950, 6950, 7250, 7250, 9250, 5250, 7900, 7250, 8450, 7950, 7950, \n6650, 7950, 7250, 7450, 8950, 7750, 7750, 5750, 6900, 6500, 8950, \n7350, 7750, 7460, 9250, 6500, 6800, 7500, 7750, 9950, 6640, 8750, \n5950, 6750, 6500, 7950, 6750, 7950, 7950, 8950, 6450, 8450, 6750, \n8050, 7750, 8500, 7795, 6490, 7950, 6425, 8950, 8750, 7950, 8900, \n8950, 8900, 6495, 7250, 9250, 6990, 7750, 6950, 7250, 9950, 9250, \n7200, 8250, 8250, 9900, 7300, 8950, 6500, 7950, 7950, 7950, 6750, \n8450, 7500, 8950, 6950, 6750, 7500, 7450, 7950, 7250, 7950, 8250, \n6750, 8750, 8950, 8500, 8250, 7900, 8500, 8250, 8950, 7250, 8950, \n6750, 7950, 8950, 7950, 7450, 5950, 7750, 8750, 8950, 7495, 6950, \n7250, 6900, 7250, 8950, 7950, 7950, 8500, 7490, 8250, 9250, 7950, \n9500, 8950, 8450, 8750, 5950, 8950, 8750, 7600, 7145, 8450, 5950, \n9000, 7400, 7500, 7400, 7500, 8950, 7950, 7950, 7950, 8950, 7750, \n8250, 7750, 6950, 5950, 7500, 7950, 7450, 7500, 9950, 7950, 9250, \n9950, 7995, 8250, 8500, 8500, 7250, 6750, 8950, 6900, 6950, 10000, \n8950, 8500, 8750, 7499, 9000, 6950, 8450, 8950, 8250, 7950, 7450, \n9000, 7150, 7750, 5845, 8500, 9450, 6750, 8400, 7900, 7950, 8750, \n9900, 6495, 8250, 6900, 7950, 8250, 9750, 8250, 8900, 8950, 6750, \n7950, 8600, 7750, 7800, 9950, 5950, 10950, 9450, 7450, 8750, \n8750, 8500, 8950, 7250, 7450, 7500, 7450, 8950, 10500, 7000, \n8950, 8250, 9250, 7950, 9950, 8750, 6950, 8950, 8750, 7750, 8450, \n8150, 7600, 7950, 7750, 9950, 8950, 8950, 8450, 7500, 8500, 7250, \n6950)), control = list(20, 7, 0, 4, 5, 2, 0, 30, 0))\n\nVariables actually used in tree construction:\n [1] Age_08_04      CC             Central_Lock   ColorGreen     Doors         \n [6] KM             LogPrice       Met_Color      Metallic_Rim   Mfg_Year      \n[11] Mfr_Guarantee  Radio_cassette Tow_Bar        Weight        \n\nRoot node error: 1.3676e+10/1007 = 13581348\n\nn= 1007 \n\n           CP nsplit rel error\n1  6.9773e-01      0 1.0000000\n2  1.3945e-01      1 0.3022706\n3  5.3910e-02      2 0.1628192\n4  2.6642e-02      3 0.1089094\n5  2.2061e-02      4 0.0822669\n6  1.9056e-02      5 0.0602060\n7  5.7485e-03      6 0.0411499\n8  5.4801e-03      7 0.0354014\n9  5.3363e-03      8 0.0299213\n10 4.1452e-03      9 0.0245850\n11 3.1563e-03     10 0.0204398\n12 1.7062e-03     11 0.0172835\n13 1.4469e-03     12 0.0155773\n14 1.1485e-03     13 0.0141304\n15 7.8774e-04     14 0.0129819\n16 7.3416e-04     15 0.0121942\n17 6.6473e-04     16 0.0114600\n18 5.6900e-04     17 0.0107953\n19 5.4252e-04     18 0.0102263\n20 4.3805e-04     19 0.0096838\n21 3.1232e-04     20 0.0092457\n22 2.4773e-04     21 0.0089334\n23 2.2308e-04     22 0.0086857\n24 1.7216e-04     23 0.0084626\n25 1.4303e-04     24 0.0082905\n26 1.0714e-04     25 0.0081474\n27 1.0653e-04     26 0.0080403\n28 8.9674e-05     27 0.0079338\n29 7.2171e-05     28 0.0078441\n30 6.3538e-05     29 0.0077719\n31 5.7421e-05     30 0.0077084\n32 5.0635e-05     31 0.0076510\n33 4.8782e-05     32 0.0076003\n34 4.6888e-05     33 0.0075515\n35 4.2086e-05     34 0.0075047\n36 4.1234e-05     35 0.0074626\n37 2.6597e-05     36 0.0074213\n38 2.6469e-05     37 0.0073947\n39 2.3707e-05     38 0.0073683\n40 2.2073e-05     39 0.0073446\n41 1.6376e-05     40 0.0073225\n42 1.4515e-05     41 0.0073061\n43 3.4650e-06     42 0.0072916\n44 3.3371e-06     43 0.0072881\n45 3.2867e-06     44 0.0072848\n46 2.8912e-06     45 0.0072815\n47 2.5209e-06     46 0.0072786\n48 2.4553e-06     47 0.0072761\n49 2.0638e-06     48 0.0072736\n50 1.5776e-06     49 0.0072716\n51 1.4328e-06     50 0.0072700\n52 1.2335e-06     51 0.0072686\n53 9.7300e-07     52 0.0072673\n54 5.1480e-07     53 0.0072664\n55 4.8746e-07     54 0.0072658\n56 2.1498e-07     55 0.0072654\n57 2.0109e-07     56 0.0072651\n58 2.0029e-07     58 0.0072647\n59 1.5678e-07     59 0.0072645\n60 1.5258e-07     60 0.0072644\n61 9.4424e-08     61 0.0072642\n62 8.8751e-08     62 0.0072641\n63 7.9133e-08     63 0.0072640\n64 7.3989e-08     64 0.0072640\n65 7.0796e-08     65 0.0072639\n66 6.6551e-08     66 0.0072638\n67 6.0938e-08     67 0.0072638\n68 6.0932e-08     68 0.0072637\n69 5.4285e-08     69 0.0072636\n70 4.0776e-08     70 0.0072636\n71 2.4373e-08     71 0.0072635\n72 1.9505e-08     72 0.0072635\n73 1.7627e-08     73 0.0072635\n74 7.3445e-09     74 0.0072635\n75 1.5423e-09     75 0.0072635\n76 1.6974e-10     76 0.0072635\n77 0.0000e+00     77 0.0072635\n\n# Plot the best tree using rpart.plot\nbest_tree &lt;- rpart(formula, data = train_data, control = rpart.control(cp = dt_model$bestTune$cp))\nrpart.plot(best_tree, box.palette = \"auto\")\n\nWarning: labs do not fit even at cex 0.15, there may be some overplotting\n\n\n\n\n\n8. Look at the feature importance (using permuted feature importance in “iml” package, with loss = “rmse” and compare = “ratio”) and determine which features have the biggest effect, and which might be okay to remove.\n\n# Load the necessary libraries\nlibrary(caret)\n\n# Feature importance using caret's rpart method\nfeature_importance &lt;- varImp(dt1, scale = FALSE)\n\n# View feature importance\nprint(feature_importance)\n\nrpart variable importance\n\n  only 20 most important variables shown (out of 42)\n\n                  Overall\nTow_Bar                 0\nAutomatic               0\nMetallic_Rim            0\nWeight                  0\nCC                      0\nPower_Steering          0\nAirbag_2                0\nABS                     0\nHP                      0\nSport_Model             0\nGears                   0\nFuel_TypeDiesel         0\nAirbag_1                0\nColorSilver             0\nParking_Assistant       0\nPowered_Windows         0\nKM                      0\nLogPrice                0\nRadio_cassette          0\nQuarterly_Tax           0\n\n\n9. Parsimony is about obtaining the simplest model possible, without oversimplifying. Remove a few of the less useful features and retrain / cross validate / tune your tree.\n\ntrain_data &lt;- train_data %&gt;% select(-Tow_Bar,-Automatic,-Metallic_Rim,-Weight,-CC,-Power_Steering)\ntest_data &lt;- test_data %&gt;% select(-Tow_Bar,-Automatic,-Metallic_Rim,-Weight,-CC,-Power_Steering)\n\n# Retrain the regression tree model with cross-validation\ndt2 = train(Price ~ .,\n             data = train_data,\n             method = \"rpart\",\n             trControl = trainControl(method = \"cv\", number = 10),\n             metric = \"RMSE\")\n\nWarning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,\n: There were missing values in resampled performance measures.\n\n\n10. Use the model resulting from question 9 and test predictions on the testing data. Compare the cross validation error and and testing data. Spend some time interpreting what this prediction error means for your pricing model and its use for CorollaCrowd.\n\n# Predict on the testing data using the model from step 9\ntest_predictions2 &lt;- predict(dt2, newdata = test_data)\n\n# Calculate RMSE on the testing data\ntest_rmse2 &lt;- sqrt(mean((test_predictions2 - test_data$Price)^2))\n\n# Cross-validation RMSE from the model in step 9\ncv_rmse2 &lt;- dt2$results$RMSE\n\n# Compare cross-validation error and testing error\ncat(\"Cross-Validation RMSE:\", cv_rmse2, \"\\n\")\n\nCross-Validation RMSE: 1371.351 1665.191 2767.129 \n\ncat(\"Testing RMSE:\", test_rmse2, \"\\n\")\n\nTesting RMSE: 1602.187 \n\n# Interpretation of prediction error:\n# Compare the cross-validation RMSE with the testing RMSE. A lower RMSE indicates better predictive performance.\n# Evaluate whether the testing RMSE is acceptable for your application and consider potential improvements if necessary."
  },
  {
    "objectID": "posts/Problem Set 3/index.html#r-markdown",
    "href": "posts/Problem Set 3/index.html#r-markdown",
    "title": "Problem Set 3",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "posts/Problem Set 3/index.html#including-plots",
    "href": "posts/Problem Set 3/index.html#including-plots",
    "title": "Problem Set 3",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n\nAssignment\n1. Create a new Rmarkdown document that will show case your data exploration, modeling, and error testing.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rpart)\nlibrary(caret)\n\nLoading required package: lattice\n\nAttaching package: 'caret'\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n2. Explore the data and determine the number of variables and the quantity of any missing values. If values are missing, prescribe a plan to deal with the problem.\n\nToycor &lt;- read.csv(\"ToyotaCorolla.csv\")\nstr(Toycor)\n\n'data.frame':   1436 obs. of  39 variables:\n $ Id               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Model            : chr  \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" \"TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\" ...\n $ Price            : int  13500 13750 13950 14950 13750 12950 16900 18600 21500 12950 ...\n $ Age_08_04        : int  23 23 24 26 30 32 27 30 27 23 ...\n $ Mfg_Month        : int  10 10 9 7 3 1 6 3 6 10 ...\n $ Mfg_Year         : int  2002 2002 2002 2002 2002 2002 2002 2002 2002 2002 ...\n $ KM               : int  46986 72937 41711 48000 38500 61000 94612 75889 19700 71138 ...\n $ Fuel_Type        : chr  \"Diesel\" \"Diesel\" \"Diesel\" \"Diesel\" ...\n $ HP               : int  90 90 90 90 90 90 90 90 192 69 ...\n $ Met_Color        : int  1 1 1 0 0 0 1 1 0 0 ...\n $ Color            : chr  \"Blue\" \"Silver\" \"Blue\" \"Black\" ...\n $ Automatic        : int  0 0 0 0 0 0 0 0 0 0 ...\n $ CC               : int  2000 2000 2000 2000 2000 2000 2000 2000 1800 1900 ...\n $ Doors            : int  3 3 3 3 3 3 3 3 3 3 ...\n $ Cylinders        : int  4 4 4 4 4 4 4 4 4 4 ...\n $ Gears            : int  5 5 5 5 5 5 5 5 5 5 ...\n $ Quarterly_Tax    : int  210 210 210 210 210 210 210 210 100 185 ...\n $ Weight           : int  1165 1165 1165 1165 1170 1170 1245 1245 1185 1105 ...\n $ Mfr_Guarantee    : int  0 0 1 1 1 0 0 1 0 0 ...\n $ BOVAG_Guarantee  : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Guarantee_Period : int  3 3 3 3 3 3 3 3 3 3 ...\n $ ABS              : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Airbag_1         : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Airbag_2         : int  1 1 1 1 1 1 1 1 0 1 ...\n $ Airco            : int  0 1 0 0 1 1 1 1 1 1 ...\n $ Automatic_airco  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Boardcomputer    : int  1 1 1 1 1 1 1 1 0 1 ...\n $ CD_Player        : int  0 1 0 0 0 0 0 1 0 0 ...\n $ Central_Lock     : int  1 1 0 0 1 1 1 1 1 0 ...\n $ Powered_Windows  : int  1 0 0 0 1 1 1 1 1 0 ...\n $ Power_Steering   : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Radio            : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Mistlamps        : int  0 0 0 0 1 1 0 0 0 0 ...\n $ Sport_Model      : int  0 0 0 0 0 0 1 0 0 0 ...\n $ Backseat_Divider : int  1 1 1 1 1 1 1 1 0 1 ...\n $ Metallic_Rim     : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Radio_cassette   : int  0 0 0 0 0 0 0 0 1 0 ...\n $ Parking_Assistant: int  0 0 0 0 0 0 0 0 0 0 ...\n $ Tow_Bar          : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\nmissing_values &lt;- colSums(is.na(Toycor))\n\n3. Analyze whether the Price variable is appropriate for a linear regression model and discuss its distribution. Are there any transformations that we might apply to the price variable?\n\nplot(Toycor$Price, Toycor$IndependentVariable, main = \"Scatter Plot of Price vs. IndependentVariable\")\n\n\n\n\n\nToycor$LogPrice &lt;- log(Toycor$Price)\n\n4. Is there a relationship between any of the features in the data and the Price feature? Perform some exploratory analysis to determine some features that are related using a feature plot.\n\nToycor = Toycor %&gt;%\n  select(-Id, -Model, -Mfg_Month, -Cylinders)\n\n\nToycor_fct = Toycor %&gt;%\n  select(-Price, -Age_08_04, -KM, -HP, -CC, -Quarterly_Tax, -Weight) %&gt;%\n  mutate_all(.funs = factor)\n\nToycor_num = Toycor %&gt;%\n  select(Price, Age_08_04, KM, HP, CC, Quarterly_Tax, Weight)\n\nToycor2 = bind_cols(Toycor_num, Toycor_fct)\n\n\nToycor2 %&gt;%\n  keep(is.numeric) %&gt;%\n  ggpairs()\n\n\n\n\n\ncorrelation_mileage &lt;- cor(Toycor$KM, Toycor$Price)\ncorrelation_age &lt;- cor(Toycor$Age_08_04, Toycor$Price)\ncorrelation_Mfg_Year &lt;- cor(Toycor$Mfg_Year, Toycor$Price)\n\n\nlibrary(ggplot2)\n\nggplot(Toycor, aes(x = KM, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. KM\")\n\n\n\nggplot(Toycor, aes(x = Age_08_04, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. Age_08_04\")\n\n\n\nggplot(Toycor, aes(x = Mfg_Year, y = Price)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Price vs. Mfg_Year\")\n\n\n\n\n\nlm1 = lm(Price ~ Age_08_04 + KM,\n         data = Toycor2)\nsummary(lm1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM, data = Toycor2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6789.7  -971.9   -63.7   828.0 12633.5 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  2.048e+04  1.400e+02  146.26   &lt;2e-16 ***\nAge_08_04   -1.541e+02  2.736e+00  -56.33   &lt;2e-16 ***\nKM          -1.646e-02  1.357e-03  -12.13   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1663 on 1433 degrees of freedom\nMultiple R-squared:   0.79, Adjusted R-squared:  0.7897 \nF-statistic:  2695 on 2 and 1433 DF,  p-value: &lt; 2.2e-16\n\n\n\nToycor %&gt;%\n  select(-Fuel_Type, -Color) %&gt;%\n  cor() %&gt;%\n  corrplot::corrplot(., number.cex=.2)\n\n\n\n\n5. Are there any predictor variables in the data that are potentially too strongly related to each other? Make sure to use reference any visualizations, tables, or numbers to show this.\nAge_08_04 and Price are strongly negatively correlated. You can see this relationship in the scatter plot below. The negative slope of the trend line shows the negative correlation. The correlation of -0.877 between Age_08_04 and Price is the only relationship that is potentially too strong.\n\nggplot(Toycor, aes(x = Age_08_04, y = Price)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +  # Add a trendline (linear regression)\n  labs(title = \"Scatter Plot of Price vs. Age_08_04\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n6. Partition your data into a training set with 70% of the observations and a testing set with the remaining 30%.\n\nset.seed(123)  \ntrainIndex &lt;- createDataPartition(Toycor$Price, p = 0.7, list = FALSE)\ntrain_data &lt;- Toycor[trainIndex, ]\ntest_data &lt;- Toycor[-trainIndex, ]\n\n7. Based on your results and relationships in questions (4) and (5), build a regression tree model to predict car prices. With the data Toycor_data Make sure to conduct cross validation to evaluate the model and choose the best cost complexity parameter for this problem (use default values for minsplit, minbucket, maxdepth, etc. But choose grid of cp values to tune over). Use rpart.plot to view your tree and discuss its complexity, usefulness, etc. What role is pre-pruning and post-pruning playing here?\n\ncp_seq &lt;- seq(0.01, 0.1, by = 0.01)\n\n8. Look at the feature importance (using permuted feature importance in “iml” package, with loss = “rmse” and compare = “ratio”) and determine which features have the biggest effect, and which might be okay to remove.\n9. Parsimony is about obtaining the simplest model possible, without oversimplifying. Remove a few of the less useful features and retrain / cross validate / tune your tree.\n10. Use the model resulting from question 9 and test predictions on the testing data. Compare the cross validation error and and testing data. Spend some time interpreting what this prediction error means for your pricing model and its use for CorollaCrowd."
  },
  {
    "objectID": "posts/Problem Set 4/index.html",
    "href": "posts/Problem Set 4/index.html",
    "title": "Isaac s Baron",
    "section": "",
    "text": "The National Veterans Organization (NVO) needs help analyzing donor responses to previous collection efforts. They’d like to improve the amount of responses they get, as well as the response rate. They’ve provided some historical data from their database that you can use to analyze and build a classification model predicting whether a person will respond to a mailing.  \n1. Write a paragraph explaining why classification is the right approach for the NVO’s problem.\nClassification is the right approach for the National Veterans Organization’s (NVO) problem because it allows them to categorize potential donors into two distinct groups: those who are likely to respond to their mailing and those who are not. By predicting whether a person will respond to a mailing, the NVO can target their outreach efforts more effectively. This approach enables them to allocate their resources efficiently and personalize their communication strategies. With classification, they can identify individuals who are most receptive to their cause and tailor their messages and incentives accordingly.\n2. Write a paragraph explaining how NVO could use the classifier you build to identify potential donors. Why could it be better than what they’ve been doing?\nThe classifier built by NVO can be used to identify potential donors in a more efficient and targeted manner than their previous methods. By utilizing the classifier, NVO can prioritize individuals who are predicted to have a higher likelihood of responding to their mailings. This approach can save both time and resources by focusing on the most promising prospects, ensuring that their outreach efforts are more cost-effective. Instead of sending mail to a broad and undifferentiated audience, they can direct their campaigns to individuals with a higher probability of becoming donors, increasing the chances of successful fundraising.\n3. Write a paragraph explaining which measures from the confusion matrix you’ll use to evaluate the classifier performance and how they relate to important areas like mailer response rate, and maximizing donation opportunities.\nTo evaluate the performance of the classifier, NVO should consider measures from the confusion matrix, particularly precision, recall, and the F1 score. Precision will help NVO understand what proportion of the predicted positive responses were indeed correct, ensuring that their resources are not wasted on false positives. Recall, on the other hand, will show how many of the actual donors they successfully captured, preventing missed opportunities. Maximizing donation opportunities is crucial for the NVO, and the F1 score, which balances precision and recall, provides a comprehensive measure of the classifier’s effectiveness. These metrics help the NVO improve their mailer response rate by reducing false positives and false negatives, ultimately enhancing their fundraising success.\nAfter perusing and cleaning the data, decide on the most useful features and build the two classification models - remembering to follow proper principles (i.e., data partitioning, cross validation, etc.).\n4. Build a logistic LASSO model using cross-validation on the training data to select the best �. View the coefficients at that chosen � and see what features are in the model.\n\n5. Build a decision tree model using cross-validation on the training data to select the best cp value. Use rpart.plot() to view the decision tree. What key features does it use?\n6. Evaluate the performance on test data and look at and describe its performance according to your confusion matrix measures.\n7. Create a ROC plot (with AUC) to compare the two model’s performance and explain to NVO what the plot tells you.\n8. Pick the best performing model, and view its precision recall chart and its cumulative gain chart.\n9. Use the charts from parts 6 and 7 to describe how the model should perform for NVO and what it could mean if they do a mailer campaign for 50,000 people."
  }
]